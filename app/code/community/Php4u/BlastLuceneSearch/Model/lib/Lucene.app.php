<?php
/**
 * @category   Php4u
 * @package    Php4u_BlastLuceneSearch
 * @author     Marcin Szterling <marcin@php4u.co.uk>
 * @copyright  Php4u Marcin Szterling (c) 2012
 * @license http://php4u.co.uk/licence/
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * Any form of ditribution, sell, transfer, reverse engineering forbidden - see licence above
 *
 * Code was obfusacted due to previous licence violations
 */ 
$_F=__FILE__;$_X="$_F=__FILE__;$_X="JF9GPV9fRklMRV9fOyRfWD0iSkY5R1BWOWZSa2xNUlY5Zk95UmZXRDBpU2tZNVIxQldPV1pTYTJ4TlVsWTVaazk1VW1aWFJEQnBVMnRaTlZJeFFsZFBWMXBUWVRKNFRsVnNXVFZhYXprMVZXMWFXRkpFUW5CVk1uUmFUbFpKZUZGc1pGQldNWEJVV1ZSS05GUnNWbk5YVkZaaFlYcHJNVlpYTVdGWFJrcEZVVzVDVjFKWGFIcGFSekZQVm14V2MxTnRiRTVpVmtwT1YxWmFWMU14Um5OYVJsWlVZVEpTVDFWdE5VTlhWbVJ5WVVkR2FHSlZjREJhUldNeFZrWmFWazVWVWxkV2JWSklWVEZhUjFaV1JuUmtSbHBYVWxWd1RsWlVSbGRVTWxKellqTm9VMkV5ZUZOWmJHUnZXVlpTV0U1V1RtbE5WMUo0VlRKNFlWbFZNVWhsUlZaV1ZtMVNjbFp0ZUVwbFYwWkZWR3hXYUUxdGFGbFdNakUwVWpKU1NGWnJhR2hTTTBKUFZGWldkMVF4WkhKWGJYUlZUV3R3U1ZVeU5WTldNa3BIVTIxb1YyRnJTbWhVYkZwclZsWk9kRTVXVm1oTlJGWXpWbFphYjFJeFRuTlRiRnBVWWxSc2FGVnRNVzlXUm14eFUydHdiR0pGTlZsWGExWjNWV3N4UmxkdVZsWk5WbHBYV2xWa1IxTkdVblZWYkZacFlUQndkMWRXV2xkVE1WcFhZMFpvVDFack5YQlZha0V4VFVad1ZtRkZUbWhXTUhCWlZrY3dNVlpzU2xoVWFsSmFWbGRTVUZwRldsTmtWa1owWWtkb1RsSlhPVFpXTVZwWFlqRkdjazFWYUZaaVJrcFFWbXBPUTJOR2NGZFZiRnBzVW0xNFdsbHVjRU5XVjBWM1RsaGtWbFp0YUVoVk1uaExWbXhPZFZKc2NHaGhlbFpGVmtkNGExUXlVa2hUYTJoUFZqSm9WVlZ0ZEdGa1ZsVjRWbTFHVWsxcmJEVldSM1JYVm0xR2NsZHJkRlppUmtwSVdXcEdjbVZWTVZaUFYzQlRUVWhDTTFaV1pEUlZNa3BJVTI1T1ZHSnJOV0ZVVjNCR1RVWnJkMXBGZEd0U2JYUTFWMnRXTkZVd01VVlNhazVXVFZaYVZGVXlNVkprTURGWFZteE9WMVpHV2taWFZscFhVakpXUjFSc1dsZGhNRFZ4VkZkMFlWZFdXa2hOVkZKb1ZqQndlVlJzYUU5V1JscFlWVzVhVlZaWFVsUlZNVnBIVmxaa2NrMVhlRmRTTTJRMlZqRmFWMkl4Um5KTlZXaFdZa1pLVUZacVRrTmpSbkJYVld4YWJGSnRlRnBaV0hCWFlXc3hjbGRzYkZkU2VrVXdXVlprUzFack5WbFViRlpVVWpBMGVsWlljRU5qTVVwSVUxaHNZVkp0VWxSV2FrcHZVMFpWZUZadFJsVk5WbHBJVlRJMVQxWnRTa2hoUms1WFlsaFNNMVZxUms5V2JGcDFWR3hrVTFZemFFbFdWbVEwVkRGYVZrMVdaR3BTV0ZKWFdWUkdZVmRHVm5OV2JrNVRVbXMxZVZVeWVHRmlSbHBXWTBWNFYySkhhSHBWTWpGT1pESktSbHBIUmxOWFJVcFpWbGQ0YTJJeFZsZFhiazVZWWtWd2FGUldXbk5OTVZaMFpVVTVWMkpWVmpOV01uaERWakpGZUdOSWJGaGhhMXBUV2tSR2ExZEdjRWRUYkdSWFVteHdiMVpVUmxkV01ERkhWRzVPVm1KcmNGZFdNRlV4VXpGV2MxZHRSbGhpUm5CWFZqSjBNRlV5U2tkV2FsSlhVbTFTY2xac1ZYaFdiVXBHVDFaS1RtSllhRVJYVkVaWFl6RktkRk5yV2s5V2JIQlVWakJrYjFSR1dsaGxSbVJXWWxVeE0xbHJWbUZoVmtwVllrWk9WVlpYYUhaV2FrWlhZMnhhZFZSc1ZrNVdWemg0Vmxaa01GUXhXWGhYYms1VFlsUldXRlZxVGs1TlZscHpWbTVPVTJKV1drZFpNRnBYVmpGWmVtRkdaRmRXTTJoWVZsZDRkbVZHWkhKWGJFSlRUV3hLV1ZaWGVHdGlNVWw0Vkd4YVdHSllVbE5aYTFwaFpXeFZlV1JGZEZkV01IQklWVEowTUZadFNrZGpSVGxZWVd0YVUxcEVSbXRYUm5CSFZteGtWMkpJUWxaV2JGcFRVVEpKZUZKdVRsWmlhelZYV1ZSQ2QxVXhiRlZUYWxKVllrWldORll5ZUU5WFIwVjZZVVZPVlZaV1dYZFZNbmhHWlZVNVdFNVdXbWxYUmtvMlZtMTRZVlV5VG5OWGJrNVdZa1p3YzFac1ZuZFRWbHB5Vld0a1ZHSkhPVFJWYlhoVFZXMUtSbGRzVGxkaVdGSXpWbTE0Vm1WR1duSlBWbVJwVW10d1NGWlhNVFJVTVU1elUyNUtWR0pIVWxoV2FrNXZVa1phVmxkc1dtdE5WbkJaVjJ0YVMxWXhXa2RYYTJSV1RWWmFWMVJXV2xkU01WWjFVMjFzVTFaSGVGVlhWM1JYWkRGTmVGZHJhR3RTTTFKVVdXdGFTMVl4V25SamVsWlhUVlZaTWxaWE1ERldhekZYVmxoa1dHRnJXbFJaTW5NMVUwWndSMVJzWkdsVFJVcEpWbTEwYTA1R1ZuTmlNMmhYVjBkU2IxVnNWbmRXYkZaellVZDBhV0pHY0hsV2JUQTFWVEpGZUZOc1RscGhhM0J5VmtWa1IxWnNUbkpVYkdScFVtNUNWVlpVUm1GVmJWWkhWRzVPVm1FelFsUldhMlEwVmxaVmVGWnNaRlZOVmxwSVZtMTBhMkZXU25KT1ZsWlhZa2RTVkZVeWVHRmpiRkp5Vkd4U1YySkZXWHBYYkZaWFZqRlZlRmR1U21wU2JGcFZWbXhhWVZSR1ZuUmtTRTVUWWxaYVIxa3dXa3RXTVZwWlVXczVWMVl6YUZCVlZFWktaVVpXV1dGR1VsZE5iRXBVVm0xNFUxWXhiRmRVYkZwWFlYcHNWbFp0ZEdGV01XeHlWbFJHVlZaclZqTlZNblJoVm14YWMxWnFVbFpXTTJoTFdrUkdZV014Vm5KalJrNVhVak5vVmxaVVJsZFdhelZYVjJ4a1ZXRXhjRmhaYTFVeFVteGFWMWw2Vm1saVJURTFXV3RXVDFaV1duSk9WbVJXWWxoU1VGWnJXbUZYVjBaR1pFWmthRTFZUWpWWFdIQkRZekZKZUdORldtbFNhelZZV1d0V2QxTXhXbGhsUjBaVVlrYzVORlpIZUdGVU1VbDVWV3hPVjJKR1NsUlpiWGhYVmpGYWNrOVdaRmRoZWxaWVZrUkdWazVXVG5OVGJGWnBVbGRvVlZac1dtRlZSbHBXVjJ4T2FrMVdXbnBXUjNoTFZqRmFWVlpzWkZkU1ZscFFWVlJHWVZZeFZsbGhSbEpwVW14d1RGWlhlRk5qTVZwSFZHeGFWMVpHV2xoV2JYTXhVakZhZEdWRk9WZE5SRVpKV2xWYVYxWnRTa1pPU0hCWVlXdGFTRlpxUms5amJVNUhWMnMxVTAweWFGSldiR014WXpGRmVGTllhRmRpYTNCUlZteFNWMVJzVmxkVmEwNVZVbXMxVjFaSE5XRlpWVEZYVW1wU1YySllhRmhWTW5oTFZsZEtSbUZHVWxkV2JGVjRWbXhTUTJNeFNuUlRhMXBRVmxoQ1ZGWnNVbGRWYkZweVdraHdUbFpyY0hwVmJHaHZWbTFGZWxGc1dsVldWa3BVV1cxNFlXTldSblZVYkdSWFlYcFdSbFpXWkRSV01WcEhVMnhrVjJKVVZsaFdhMVpHVFZaV2NWSnRSbE5OV0VKSFZUSjRZV0ZGTVZkWGJsWlhZVEZLU0ZVeWVIWmxSbVJ5VjIxb1UxWnVRa3hXVnpFMFdWWmFWMVp1VGxWaE1EVlhWVzE0WVdReFZsaGxSVTVYVFZWd1dWbFZWbXRXTVZsNVpVVlNWbUpHY0V4V2JYaExZMnN4VjFWc1pGZFNiSEJMVm0xNGIyTXhSWGhVYms1V1lsUldUMVZzYUZOVE1WWlZVMVJXYVdKR2NIbFdiVEExVlRKRmVXVkZhRmRTTTJoRVZsUktTMUl4VG5OaVJscFhZa2hDVFZaWE1UQk9SMHB5VFZWYWExSllRbE5VVjNCelpGWmFWMWR0Y0U1V1ZGWlhXV3RXYjFkSFNuTmpTRVphWWtaS1JGbHRlSE5qVms1elkwZEdUbGRGU2twWFYzUlRVVEpHZEZOc2FHeFRSVXBvVlcweGIxWkdhM2RhUlhCc1ZsUldTbFpIZEhkV1JrcFZWbTV3V0ZZelVuSlVWRXBPWkRKS1JtSkdXbWxpV0dob1ZtMDFkMVl3TlhOYVNGSk9WbTFTYzFac1pEUlRWbGw1VGxkR2FHSlZjRmRaTUdoclYwZEZlVlZzVWxwaE1sSk1XVEJrVW1WV2NFaGpSMnhYWWtkM01WWnFTalJpTVUxNVZtNU9hbEpzU2xOWmJHaHZZMFpzYzFwR1RtdE5WM2d3VkZaYWEyRldTWGRPVkVKYVlUSm9XRmRXWkZkV2JFNTFWV3h3YUdGNlZrMVhWbHByVWpGa1IxWnVVbXRTTUZwWVdsZDRTMlJXV2taWGF6bFNUV3hhZWxrd1dtOVdNVmw1Vlc1Q1ZtRnJiekJaTVZwcll6RnNObEp0YUdsVFJVcFdWbFpqZUdJeFpIUlRiRlpvVFRKNFdWbHJWbGROTVZZMlVXNU9VMUl3YkROVWJGWlRZVVphVmxkcVVsWk5WbHBZVmtSS1UyTXlUa1poUm1SWFRXeEtlVlpHWkRCWlZUVnpWR3hhV21Wc1dtOVdiVFZEVFZaYWRFNVlaRmhpUm13elZHdG9hMWRIU2toVmJFNVlZV3RhTTFVeFdtRmtSMVpHWTBaU1UyRXlPVFZXVkVaWFlqRkZlVlpzWkdwU2JYaFpXVzEwUzJOR1VsVlNiVVpQWWtVMVYxZHJVbE5oYkVwMFpFUldWMkpVVmxoV01uTjRZekZhZEU1WFJsTmxhMW8yVjJ0amVGTXhUa2RUYmtaU1lsZG9XRnBYTVRObFJtUlZWRzF3YTAxVk1UTlphMVpUWVZVd2VHTkZXbGRXYlUweFZYcEdSbVZHU25WVGJVWk9Wak5STVZkc1ZtdGlNa1p5VFVoa1RsWjZWbUZaVkVwVFpXeHNXR1ZJWkZoU1ZGWmFXVEJrUjFZeVJuUmxTRnBZVmtWS2RsVlVTazVsVmtwellVWldhVll5YUhsV1YzQkxUa1V4YzJKSVVtbFNWVFZ3VldwR1lWTnNXbGhOVkZKb1ZqQndXRlV5Y0dGV1JscFlZVVZTV2xaV2NETlZNR1JTWlZad1NHVkhlRmRXVjNjeFZtcEdZV0l4VG5OaU0yUnFVbGRTVVZac1ZuZFdiRlp6WVVjNVZsWnNjSGhWVjNoclZURmFkRnBFVWxkU00xSm9WbTB4UzFJeVRrWmFSbVJYVFRKTmVGWlhlR0ZVTVZweldraE9WbUV6UWxSVmExWkxaRlphUjFac1RteGlSemsxVmxjMVUxVXlTblJsUlhSV1ZrVmFURmxzV2xkV01WcHhWV3hXVjJKRldUQldNblJYV1ZaVmVGTnVSbWxTV0ZKWVZteGFjazFXVm5OWGF6bFhZa2RTZWxaWGRIZFZNVXBHVTI1V1YxSnNXbFJhVjNoMlpWWldkVlZzVG1saVdHaE1WbFpTUjFNeVNsZFhhMXBYWW1zMVZGVnRkSGRXTVZKelYyeE9WazFXY0hoWmExcExWbXhhYzJOR1VsWk5WbFV4Vkd4YVIyUkZNVmhrUm1Sc1lrWndORll5ZEZkaE1rMTVWVzVTVkdKclNsTlpiRnAzVjJ4U1dHTjZSazVpUjNnd1ZHeFZOVlJzU1hkT1ZFWlhZbFJHTTFsVVJrWmxWbkJKVTJ4b1UxSllRa3hXUjNSV1RVZFdWMU51VW14U01GcFVWRlpXV21Wc1dYaFZhM1JXVFd0YVIxUlZhSE5XTVdSSVlVZG9XbUpHY0VoVWJGcFRZMVpPYzFSdGJGZGlXR2QzVmxSSmVHUXhVWGhUYTFwcVVucHNWbFp0ZUV0amJHeHlWMjVLYkZac1NscFpWVnBIVm1zeGMxTnFXbGhXYkhCeVZrUktTMU5HVG5WV2JGWnBWMGRvVDFkWGVHRlRNa2w0WTBWYVZXSllRbkZVVldRMFVsWmFXRTFYUmxoaVJtd3pWRlpTWVZkR1drWmpSWGhhVmxaVmVGcEZXa3RrUlRGWVVteGtVMkV4YTNsV2ExcHFaVVpKZVZOc1dsQldiV2haVm10V1lWVldXbkpYYTFwc1lrZFNXbGt3V2t0VWJGcDBaVVpzVjFKNlFqUldSRVphWkRKS1JWUnNhRmRTV0VKb1ZrUkdhMVV4VGxkVWJrWlRZbFZhVjFSVVNsTmtWbFY1WkVad1QxWXdjRWRVYkZwdlZqRmtTRlZ0UmxwV00wMTRXV3BHVW1WR2NFZGFSMnhYWWxob1YxWldXbTlrTVZGNVVtNU9VMkZzV2xaWlZFWkxXVlpTV0dWSVpGTldiSEJXVlRKek5XRldXblZSYWtKWFRXNVNWRmt5TVZkV2F6bFhZVVpvVjFKc2NGQldWM1JUVW0xUmVHRXpiRTlXYlZKd1ZXeG9iMUpXVmxkYVJFSllWbFJHZWxac2FITldWMHBIVTJ4U1dsWXpUalJXYkZwelRteGFjMk5GTldsU2JGa3dWbXBLTUdFeFRuUldia3BPVjBaS1dGbHNhRk5VTVZaeVYydGtUMVpzU2xoV1YzUnJZVVV4V0dWR1dsWmlSa3BJVmpJeFYyTXhXbGxhUmxaWFlsWktUVmRXVWtkUk1XUlhWbTVXYVZJelVsaFVWbHBoVG14VmVGWnJPVlpOV0VKNldXdFNZVlpXV2taVGJXaFdZVEZ3U0ZScldsSmtNVloxVTJzMVRsWXphRFJXVjNodllqRmtkRlp1VW1oVFJrcFdXVmQwZDFZeFVuTldWRVpYVm10d1ZsVXljelZoVmxwWFkwaGtWMDFYVWpOV01qRlhWbXN4V1ZWc1VsZFNWWEJSVjFaamVHRnJOVmRhU0ZKT1ZsZFNjVlJYYzNoT1ZscHpZVVZPVkdKRk5VcFdSekF4VmtkRmVXRkdVbHBoYTNCSVZqRmFVMWRXVm5OU2JXeFRVak5vTkZZeFdsZGhNVmw1VW01U1UxZEhhRkZXTUdoRFlVWmFjVkZVUW14U2JYUTFWRlphWVdGVk1VbFZiRnBhWld0d2NsVjZSazlTTVU1MVYyeHdWMkpYYUZCWGExWmhVVEpOZDA5V1drNVdiRXBZVm14U1YxTkdXbkphUkZKVlRWVndlbGRxVG05VmJVVjNZMFpvVm1KSFVuSlpiWGhYVWpGU2NsTnRhRTVXTWxFeFZsUkdVMVV4VVhkTldFcFlZbXMxV1ZsVVNsTlZNWEJGVW01S2JGWnNXakJaVlZVeFZHMUtSMWRVUWxkTmFrSTBWbGN4VjFack5VbGlSbHBwVmtWYWFGZFhlRmRrTWs1WFZXNUtWbUV6VW05VmJGSkhWbXhrY2xwRVVsaGhla1o1VkZaU1UxWlZNSGxsUlU1YVZrVndWRlV3WkVkVFZrWjBZMGQ0VjFKVldqVldNVnBoWVdzeFdGUnJhRlpoTVVwb1ZGYzFVMWRzVWxoa1IwWnFWbXhLVmxVeWN6VmhSbHAwWlVaYVYwMXFSblpYVm1STFZqRmFXVnBHVmxoVFJVcE5WMVpXWVdReVRsaFRhMmhPVmxSc1dGVnFUazlOTVZwSVkwVjBWV0Y2UmtkVWJGcHZWVEpLV1ZGdGFGcFdNMmhvV1RCYVUxWnNjRVpQVjJ4WFYwZG9SbFpXV210TlJtUldUVmhPVjFkSGFGbFphMXBMVWtac1YxWllaR3hXYTNCV1ZtMHhSMVl3TVZsUmJscFhVbXhhVkZaSGMzaGphelZXVm14U1YxSlZjRkZYVm1RMFpESk9jMVZ1VGxaaVNFSlBXV3RvUTAxR1dYbE5WRUpXVW14d1IxbFljRWRYUjBwWlVXNXNZVkpGU1RCVmExcEhWMGRTUjJKRk5XbFNiRmt4Vm10a05GVXhWWGxTYmtwT1ZteGFZVnBYZUdGWlZsSllaVVphYkZKdFVubFhhMVozWWtkR05sSnFRbGRpVkVWM1ZrZDRTMUl4U25GV2JGWlhZa1Z3U1ZkV1VrZGpNVnBYVTJ4V1UySklRbk5aYTFwWFRURmFSMWR0ZEZSTmExWXpXbFZXVTFWc1dYcFZiSEJWVmpOT05GUnRlRk5qYkhCSFUyczFVMVpGV2xkV01qVjNWakZSZDAxWVNtbFNSa3BXVm0weFUxUXhVbkpYYm1ScVZtNUNTVnBWV2tOV01VcHpWMVJDVjFKNlJqTlhWbVJIVWpKS1NWVnNVbGRTV0VKUVYxWmtNR1F5VGtkVmJrcFdZa2hDVUZWc2FGTldiR3cyVTIxMGFGSnNiRFJaYTJoaFZrZEZlV0ZHVWxwaGEzQklWakZhVTFkV1ZuTlNiV3hUWWtoQ1YxWnNaRFJYYXpWWFYydGtWR0pIVWxWWmEyUlRWa1phZEdSSVRtdE5WVFZYV1ZWb2QxbFZNVWxSYTNCWFZucEJNVmxWV210U2F6RlZVV3hhVTAweVRYaFdhMlEwVWpGYWMxVnNhR0ZTYTFwWFZGVldZV1ZXWkhKV2JYUnBUV3MxU1ZaSGNGZFViRVY2Vld4d1ZWWjZSbFJaZWtaM1VteGtWVlp0ZEZOaVdHaGFWbXRqZUZsV1pITlhXR2hVWW10d1lWUlhjRWRYUm5CWVRWVTVUMVp0T1RaVlYzaERZa1phVm1GNlJsWk5WbHAxV2tSR2RtVkhUa2xXYkdScFlrWndhRlpHVWtkVE1sRjRZa2hHVkZaRlNtaFVWM040VGxaYWRHTkZUbGhXVkVJelZHeG9UMWRyTVhGV2JXaGFZVEpTVUZsNlFUVldWazV6WTBab1UxZEZSWGxXV0hCRFZERlZlR05JVG1sU2JGcFdWbXRXZDJGR1duSlhhM1JyVW0xU1ZsVXlkSGRVYlVwSVpVUkNWbUpIYUhaV1JFWktaVWRGZW1KR2FHaE5iRXBaVjFaa2VtVkdXbGRqUldoT1ZqQmFXRlZzVWxka2JGcElZMFYwVkdGNlJubFVhMmh6VjBaa1NHVkZPVmRoTVhCNldrUkdUMVp0UmtsalIwWk9VMFZLUzFac1kzZE9WMFpIV2tWYVRsWkZTbGRWYWs1cVRWWnNXRTFWWkZSU2JIQXdXVEJrYjFSc1draGtla3BYVFc1b2NsWkVRWGhYUmxKMVZXeGtWMlZ0ZUU1V2JYUnZWREpLYzFSdVNtaFNhelZ3VkZkMFlWZHNXa2RoUms1V1ZqQndSbGxyV2xkV2JVcEhZMFY0VjJGcldreFdha1pQWkVaa2MxcEhhRTVTYmtKV1ZtMTRiMk14Um5KUFZscHBVbFpLVjFsc1duZFpWbHB5Vmxoa2JGWnRVbnBXVjNoUFlWWmFkR1JFVmxaTlZrcE1Wakl4UzFac1duRlZiRlpvVFd4S2FGWkdaRFJrTVU1SFYyNVNhbEpVVmxoVmFrWkxUVVpaZVdWR1RsVk5hMXBIVkd0b2MxWkdXa1pqUmtKVlZqTm9lbFJzV2xOV01WWnpZMFU1VGxJemFFWldiR1IzVVRKR1IxTlliR3hTUm5CV1ZXMTRSbVZHWkhSbFJUbFhUVlZhZWxaWGRIZFZNVXBHVTI1V1ZrMXVVblpXVkVwS1pWWktjMkpHVmxoU2EzQlRWMWQwVTJNeVVsZGFTRTVvVW1zMWFGbHNWbUZYYkZaWVRWZEdXR0pHYkRSVk1qVkxWMnN4Y1ZKc2FHRldla1pRVkd4YWRtVnNSbk5SYlhoWFZsWndOVll5ZEZkaE1rbDVWR3RvVldGc1drOVZWRTVUVjJ4U1YxWlVSbE5OVm5CWldsVmtSMVV5U2tkWGJuQlZUVlphTTFac1pFWmxSMDVIVW14U1YxWnJXWHBXTW5CRFpERk9WMVp1VWxCV01taFpWV3hTUm1ReFdsWmFSRTVQVmpCd2Vsa3dXbk5XYlVwWFkwaEdWVll6YUdoVWJGcDNVMFV4VjFwSGVGZGlWMUV4VjFkMGIxWXhiRmhUYkZab1UwWndWVlJXV2t0T2JHUnhVMjFHVjFKcldqQlVWbVF3VmpKV2MxZHVhRmhoTVZweVdYcEtVMlJHVG5WUmJFcHBWbTVDYjFaR1pEUlhiVkY0V2tWV1ZGWkdXbk5aYTJSclRteFplVTFYT1doaVZWcFpWMnRvUzFkR1NrWmpSMFpWWVRGV05Ga3hXa3RrUjA1R1RsWk9UbEpHV2paV2ExSkRZVEZrY2sxV1drOVhSa3BVVmpCa2IxVldWbkpYYmtwc1VteEtXRlpYTURGVWJGcFZWbXhzVjAxcVJuWldNbmhoVWpKS1JWVnNhRmRpUlhCWVZrWldZV013TlhOV2JHeHFVbFJHVTFSVlZtRmxWbGwzWVVoa2FHRjZRak5VVldoelZqSktXVlZzUmxaaE1WcE1XVEZhVW1WR1ZuUlNiV2hYWW10S1YxWldZM2hqTVZGNFUydGFhVkpHY0ZsV2FrNURWREZTV0dNemFFOWlSVm93V2xWYWQxWXhTWHBWVkVKWFRWWndWRlZVU2tkamF6VlhZVVpTV0ZORlNrNVdiRkpEVTJzd2VGUnNXbFZpUlRWb1dXdG9RMlZHWkhGVWJrNVZZa1pzTTFSV1VrOVhSbHBHWTBaa1ZXRXhjRE5aTVZwaFZsWk9jMk5HWkZOV2JGWXpWbXRqZUdReFduUldhMXBRVmxaYVdGWnJWbUZoUm14elZtMUdhVTFXU2pCWk1GWnJZVVpLVlZac1dsZFdla1l6VmtSR1MxSnJNVmhPVmxwVFlYcFdSVmRzWTNoVk1VNVhWRzVHVW1KWGVFOVpiVEZ1WlZaa2NsVnJkRmROYkZwWFdrVldVMVp0U2xkalIyaGFWbnBHY2xSc1dsTldNWEJHVGxkMFRsWXpVVEZXYlhoVFZURnNXRkp1VGxkWFIzaFpWbTE0UzFJeFVuSldWRVpxVm14d1dsbFZXa05WTVVwelZtcFNWMDFxUWpSVmFrcEhVbXMxV1ZKc1RtbFdNbWhSVm0xMFlWTXlUbGRWYmtwV1lYcFdjVlZzVW5KTlZsWllUbGhrYUUxRVJqQmFSRTVyVjBaYVJtTklWbHBoYTBvelZXcEJOVkpXVW5KUFYzaG9aV3hhTmxacVNqQlZNa3AwVlZob2FWSkdjRzlhVjNSM1dWWnNjMWRzWkU1TlYxSlpXVEJhUzJKR1dsVlJhbFpXVFZkb00xWkVTa2RqYXpGVlZHeG9hVkl4U2toV1IzaFdaVVprUjFOc2JHRlNia0p6V1d0YWQyUXhXa2RoU0U1cVlrYzVOVlp0Y0ZkVmJVcFpVVzFHVjAxR1ZYaFpla1pQVm14U2RHUkhiRmROUkZWM1ZtMHdlRTVHWkhSVGJrcFBWMFZ3VlZsdE1UUlJNVkowWkVoT1ZGSnNTakJaVldSM1ZHMUtSMWR1VmxaTmJrSkxWRlprUzFOR1ZuSmhSbEpwWW10S2IxWldVa3RVTWtwelZWaHNhVkpWTlc5WmEyUTBWMnhhU0UxVVVsUmlSVlkxVmxkd1lWZHRSbkppZWtKYVZsZFNVRnBGWkV0VFYwNUdaRWQ0VjFaV1ZqVldWRVpYWVRGUmVWSnJhRlZYUjNoWVZtcEtVMVJHVWxWUlZFSnNVbTE0TUZSVlVsZGlSMFY2VVZSR1ZsWnNTbWhWTW5oS1pEQTFXRTlXY0d4aE0wSllWakp3UTJSdFZsZFdibEpvVWpOQ2NGbHNXa3ROTVdSWVRWaE9hR0pIT1ROVU1XaERWVzFLZFZGdVNsVldla1Y2V2tSR2ExWldUblJPVjJ4T1UwVktTVlpFUm1wbFJsWkhVMnRhYVZKR1NsbFdNR2hEVWtac1dHVklaRmRXTUZwSlZGWlZOVll4U25WUmJscFhVbXh3VkZsdGMzaGphelZYVm14T1YxSnJjRkZXYlhSaFdWZFNSMXBHWkdGU1ZuQlBXVmh3UjFkV1ZuTlZhMlJWVFZWc00xUlZhR3RXVm1SSVpVaHNXR0ZyY0ZoVWJGcEhaRWRPUjJOR2FGTldSbG8yVmxSR1YxUXlSWGxTYmxKVVYwZDRVRlp1Y0VkVVJuQlhWbXRhVG1KRk5WZFdSM2hQV1ZkR05sWnNiRmRTYkVwVVZsVmFZVk5HVWxWUmJHaHBWMFZLZUZkc1dtRmtNVXBYVjJ4V1YySlZXbTlaYkdSdlRVWlplRmRzVGxwV01IQklXVEJhVjFkR1pFaFZiRUpXWVRKU05scFdXbXRYVjA1SFUyczVWMVpGV2pSV1Z6QjRUa1pzVjFOWVpHbFNlbFpYVlcxek1WRXhiSFJrUkU1c1lrWktNRmxyWkc5V01sWnpVMWhzV0Zac2NISlhWbVJIWkVaT1dXSkZPVmRsYTFwMlZtMXdTMVF5VWxkVldIQnBVbFUxYjFacVFURk5SbHAwVFZjNWFGSXhXakZXUnpBeFYwWmFSbU5GYUdGV00yZ3pWbXRhUjFkRk5WaGlSbVJPVW01Q05GWlVTVEZqTVVaeVRsaEthVkpXU2xkWmJGcDNWVVphY1ZGWVpFNVNiRVkwVmxjeGQxUXhTblZSYm1oWVZrVTFlbGRXV2t0U01WcFZVbXhvYVZkRlNqSlhWM2hoWXpGYVYxcElVbXhTTUZwWVZXMHhNMlZzV2toa1JrNXFZWHBHZWxsclVtRldiRnBIVjJzNVdsWXpVbWhaZWtaclkyeHdSbU5IUms1V1ZYQldWbFphYWsxV2JGZGFSV1JVWW14d1dWbHJaRzlUTVd4MFkzcFdUMVpyV2pCWmEyUjNZVlphYzJOSVdsaFdiV2d6V2xkNGRtVkhSWHBpUms1cFltdEtiMVpzVWtOU01sSlhZa1prYUZKVmNIQlpWRW8wVW14c2NWTnRkRlJOVlhCNFYycE9iMWRHWkVsUmJsWlZZa1pWZUZSdE1VZFRSVEZXVDFkNGFFMHdTalZXYTJRMFZUSk5lVk5zV2xCV1YyaFpXV3hrYjFWR2JITlhiVVpxVFZaS01Ga3dWa3RVYkVwVllrWmFWMDFxUmpOV1JFWkxVMGRTUlZac1ZsZGlWa3BaVjFaU1IyTXlUa2RTYkZacFVsaENVMVJYZUV0Tk1XUllUVWhvVjAxRVJrZFphMVpUVjIxV2RGVnJkRlpoYTBvelZHeGFhMk14Y0VaYVIzQm9aVzF6ZUZaV1pIZGpNVTV6VTFoa2FsSkdXbGxaYTJSVFUwWnJlV042Vms5V2Exb3dXVEJhZDFkR1NsVldibkJXVFZaYVVGbFVTazVsVmtwellVVTVWMUpXY0hwV1ZsSkxWREpLYzFWWWJHbFNWVFZ6V1d4YVIwNVdiSEpWYTA1WVlYcEdNRmRyYUdGV1IwVjRZWHBHV21KR1ZURlZiRnBQVjFkR1IyTkhlR2hOU0VJMFZtcEtORlV5U1hsVGJGcFBWbXhhV1Zsc1pHOVVNVnB5V2tkd2JGWnNTbnBXVjNSaFZERktWVlpzV2xkaVZFSTBWako0V21ReFdsbGlSbFpYWWxaS1NGWkdXbFpOVms1SFZXeFdVbUY2Vm5OV2FrNVRaRlprYzJGSVRsSk5hMXA2V1d0YWMxWlhTbGxoUlhSV1ZrVndWRmt4V25OalZrNVZVbTFzVjFkRlJYaFdWbHBUV1ZaT2MxSllhRlJpVkVaV1dXdGtVMVF4VW5KV1ZGWlhWbTEzTWxaWE1VZGhSMHBXVGtSR1YwMXVVbFJXYlhNeFZqSk9TVkp0YUZObGExcG9WbTEwWVdReVRYaGFTRTVXWWtoQ2NsUlZVbGRTYkd4WlkwVjBXR0pXV25wVmJGSkhWbFpaZWxGcmFGcGhNWEF6VlRCYVQxZEdjRWRTYkZwT1VsWnZlRlpyVmxOVU1WRjVVbXhvVTJKSGFGQlZNRnAzWWpGYWNWSnVaR3BXYlhoNFZURlNSMkZXV1hkWGJHeFlWa1ZyZUZaVlpGZFdiRTUxVVd4d1RtRnJXbGxYVmxaclVqQTFkRlJZYkdGU2JrSlBXVlJHZGsxc1dYbGxSVGxTWWxWd01GVXllRzlWTWtwWlVXdDRZVlpzV2tkVVYzaFBWbXhTYzFSdFJtaGxiRnBhVm10YVUxVXhWa2RYYTJoVlZrVktXVmxzYUVOalZuQlhWMjVrVTFac2NGWldiVEZIWVVkS1dHRkVRbGROVm5CVVYxWmtTMUl5VGtkV2JHaFlVakZLVVZaWGRHdGxiVlpYV2tac2FsSnJjRkJXYkZKSFpVWldkRTFVVWxwV2Eyd3pXV3RqTVZac1NuSk9WVTVhWWxob1VGVnFSbmRUUjBaSVVteE9UbFpYT0hoV1ZFa3haREpXYzJJemFHbFRSbHBWV1d4b2IxbFdXbkZVYXpWT1RWVTFWMWRyVlRWaFJrbDNUVlJXVjJKSFVuSlZla0Y0WkVkV1JWUnNVbWxpV0doRVZrY3hNR014U2tkV2JsSllZWHBzV0ZSVlVrSmtNVnBGVW14T2FHRjZWa2haTUdoSFYyc3dlV1ZIYUZaaE1YQlhWRlphYTJSSFRraFBWMnhYWWxob1YxWnFTWGhPUm14WFYydGthVkpGTlZaWlZFWkxaVlpTV0dWSVRrOWlSbHBXVm0xek1XRkhSWGhqU0hCWFRXNVNjbFV5ZUhabFJrWnpWV3hLVjJWc1duWldiVFYzVmpKTmVHTkZXbFZoTURWdlZXMDFRMU5XV2xoT1dFNVdVakJhV1ZaR1VrOVdSbHBZVld0NFlWWnNjRE5XTUZwTFpGWk9jMUZ0ZUZkV1YzTjRWbFJHVjJFeFRYbFdiR1JxVW0xb1ZGbHRkSGRWVm5CWFZtdHdUMVpyTlZkWlZWWXdZVlpKZUZOcmNGZGlWRlo2V1Zaa1IxWnNTblZUYkdoVVUwVktXVmRXWkhwT1ZrcFlVbXBhVldKRlNsUlVWbVF3VG14YVIxa3phRlpoZWtaWFZERmFiMWRHV2tkVGJXaGFZa1phVjFwV1dtdGpNWEJIVjJzMWFHVnJXa2RXYkZwVFZqRlJlVk5zV2s1VFIxSldWRlphUzFNeGNGWlhibVJZVW14YU1GbHJXa05pUmxwV1lYcEdWazFXV25KWFZsVjRWMFpPZFZWc1ZtaGhNSEIyVm0wMWQyTXdNVmRVYkZwWVZrWmFjRmxyYUVOWGJGcFlUVmRHV0dGNlJuaFphMUpIVjBkS1ZWSnVjRnBpV0ZGM1ZXdGtSbVZXY0VobFIzaFhWbFp3TlZZeWRGZGhNa2w1Vkd0b1ZXRnNXazlWVkU1VFYyeFNXR042Um10aVIxSjZWMnRWTldGdFNraGFSRnBYVW5wRk1GWXljM2RsUm1SeFZteG9hVkpVVmpGWFZFSldUbFUxVjFKdVZsSmlWVnB2Vm1wS2IwMHhaRmhOU0docVRWaENlbGxxVG5OV01rWnlVMnN4VmxaRmNGUlViWGhyVmpGd1NGSnRiRk5pVjFFeFZrWmFiMWxXYkZkVFdHaFhZbXhhVlZSV1ZURmxWbVJ4VTJ4a1QxWnJXakZaYTJSSFYwWktjbUpFVWxoV1JXd3pWRlZhZG1ReVNYcGhSbFpvVFVoQ1ZWZFdVa2RaVjBwWFYydGtWMVpHV2xSV2JYUjNWbFprV1dOSGRGUmlSVFZHVlZjd01WWkhSWGhoZWtKVlZrVkZlRlJ0ZUZOa1IxWklVbXhPVTAxc1JqWldha1p2WkRKT2NrMVlUbWxUUmtwWVZqQmtVMWxXYkZobFJXUlBWbXhLVmxVeWRIZGlSMFkyVm01b1YxSnRhSEpYVmxwYVpERmFWVkpzVmxkaVZrcElWMnRTUjJNd05YTlhibEpwVWxSV2MxWnNWbFpOVmxWNFZtMDVWVTFFUmtsV1J6VlhWbTFLYzJOSVFsWmlia0o1V2xkNGEyTXlSa1pqUjJ4T1ZteHdTRmRXVm1GU01XUldUVlZXYVZKc1dsVlVWbHBMVG14a2NWTnJaRmhTYlZKWlZERmtkMVJyTVZkalNHUllWMGhDVUZaVVNsZFdiVkpHVld4YWFWWnVRbEZYYkdONFZEQTFjMXBJVG1GU2EzQlFWV3hTUjFOV1drZFZiR1JWVFd0d1Yxa3dhRTlXVmxwWVZXdDBWVlpXVmpSWk1WcFRaRWRLUms1WGVHbFNNMk41Vm10YVYyRXhXWGxTYTFwUVZteGFWRmxzWkc5VU1WWnhVVmhrYkZKdFVsbFpNRlV4WVdzeFNHVkZXbFpXYldoUVZUSjRTMUpyTVZsYVJscFRZa1ZaZWxkWE1IaFZiVlpZVTJ0c1YyRXpVbk5XYWs1VFpGWmtjMkZJVGxKTlZWcFlXVEJhYzJGR1NYcGhSMFpoVm0xU2NscEdXbk5XTWtaR1ZHMW9hVlpYZHpGV1IzaHFaVWRHUjFkWWJGVmhhM0JaVm0weFVrMUdiRFpSYm1SUFZqRkdOVmRyVmpCVk1rWjBaVWhzVjFJelVuSldWM04zWkRBMVYxWnNaRmRTV0VKUVZrWmtOR1F5VFhoYVNFcFdZVEExY0Zac1VuTlNiRlY1VFZoT1ZXSkZjRWRaTUdNMVZsZEtSMU5yZUZwaVJsVjRWRzE0YzA1c1duTlJiR1JUWWtacmQxWnFSbTlrTVVwMFZtdGFUMVpzU205YVZ6RlRVekZXY1ZOcVVtdFNhekV6VjJ0Vk5XRXlTbGRUYkd4VllrWktSRlpGV2tabFJrNTBUVlpvYUUxVmNGVlhWbEpDVFZVMWMxZHNWbE5oZW14dldWaHdWMDFHV1hsbFIzUldZbFpHTkZrd2FFZFpWVEI1WlVkR1dsWXpVa2hVYkZwclZqRldjMWR0ZUZkaWEwbzBWakZvZDFReFZrZFhhMmhxVFRKb1ZsWnRNVk5VTVhCV1ZsaG9WMVpzY0ZwVlYzUjNWVEZLUmxKVVJsWk5WbHBVVlZjeFQxSnRTa1ppUmxKcFYwZG9lVlpVUW1GWlZUVlhZa2hTYVZKVmNIQlphMVozVjBaVmVXVkZPVmRXVkVaWFdUQmplRll4U2taWGExSldZbGhvVkZrd1duTk9iSEJHWTBaS1RsWllRakJXYTFwdlpERlplVk5zV2s1WFJWcGhWRlJLTkZReGJGaGpNMmhQWWtaS1dWa3dZekZpUjBZMlZtdHNWazFXU2xSWFZscEtaREpGZWxwR1ZsZE5NRXBZVmtaU1IyUXhaRWRhU0ZKc1VsUldiMWxzYUc5a2JGcEhWbXhPVjJGNlZsZFVhMmh6VmxaWmVWVnNTbGRXUlVwTVdrUkdjMk15UmtaVWJYQk9ZVEozTVZac1kzaE9SbEpIVWxob1ZGZEhVbUZXYkdSVFpXeHdXR1JFVWxkV1ZGWlpWako0VjFVeFdYcGhSa1pYVmpOb1dGVjZSbFpsUms1elYyeE9hRTB5YUU5V1ZsSkRVakpPYzFwRlZsUmlSWEJQVlcwMVExSnNaRmxqUldSVlRWWndTRmxyVW1GWFIwcFZVbXhvV2xaRlJqUlZNRnByVmxaV2NrNVhiRmRXTTJRMlZtdGFhbVZHU25KTlZscE9WMFpLV1ZaclZURlZSbkJZVFZod1RsWnNTbnBXVjNScllVZEdObEpzV2xaaVJrcElWa1ZhWVZOV1VuUk9WMFpwVWxSV1JWZFhkR3RUTVU1WFZXNVNiRkpZUWxWVk1GVXhaRlpWZVdSR2NFOVdNRlkwV1RCYWIxWlhTbGxWYlVaVlZqTk9NMVJXV2xOV01YQkdXa2RzVjJKWVkzbFdWbHBUVXpGa2RGSnVVbUZTUmxwWlZqQm9RMVl4Y0VWU2JrNVhWbXMxTUZSV1drTlZNVWw1VkdwV1YwMVdTa3hXTWpGWFkyc3hWbFpzYUZkU2EzQlJWbXhTUTFKck5WZFViRnBWWWtVMVQxVnFRbUZUVm14eVlVaGtWVlpzY0VaV2JUQjRWMGRHY21OR2FGVldWbkIxV2xaVk5WZFhUa2RpUlRWT1YwVktNbFl4VWt0ak1rcDBVMjVPYUUweWVGRldNRnBoWVVac1YxcEZPV3hpUlRWWFZrZDRUMWxYUmpaV1ZFcFlWa1UxTTFkV1dscGxSa3BWVVd4V1YxWXhTbEJXUjNoV1RWZFNSMVJ1VW14U1ZGWlVWRlZrTUUweFdrZGFTR1JWVFd0YVYxUldVbUZYUm1SSlVXczVWbUZyV21oWmFrWlNaVVpXY2xwSGFGTldSVnBLVm10YVUxSXhaSFJTYmtwT1YwZFNWbFJVU2pSUk1XeFZVbTA1VDJKSGREWlpWVnBEVmpGS2NsWnFUbGRTYkZwVVZWUktSMVpyTlZWWGJIQnNZWHBXVWxaWGNFSk5WMDVIVld4a1ZtSnJOVzlWYlRFelRXeFdjMVZzWkZaU2EzQkhWVEkxUzFkR1dqWlNiR1JoVWtWYU0xWnNaRWRUUjA1SFkwVTFhVkl6VVRKV1ZFWlhWVzFSZUdJemFGTmhNbmhUV1cxNGQyTldWbkZTYlVaT1Ztc3hNMVpIZUU5WlYwcEpVV3RzVjJKVVJqTlhWbHBLWkRBMVdWSnNWazVXYTNCSlYxWldZV1F5VWtkVmJHeGhVbFJzY0Zac1pIcGtNVnBIV1ROb1ZXRjZSbGRVVmxadlZURmtTR1ZIYUZwV2VrWnhWRlZhVTJSRk1WWlBWMnhYVmtWVmVWWldXbE5UTVZaSFUydGtWMkp1UWxWV2JGVXhWRVp3VjFkdVRtcFNhelZhVlZkNFEySkdXbFpqUkU1WFRXcEdlbFZYTVVwa01rcEhWV3hhYVZadVFsRlhiR1F3Vm1zeFYxVnVTbFppUlhCeVZGVlNSMU5XVlhoVmF6bFZUV3hhTUZaR1VrTlhSbHBHWTBWMFlWWldWVEZXTUZwTFpFZE9SazVXWkZOTk1ERXpWbXRhVjJFeFZYbFNiR1JxVW14YVUxbHNhRzlWVmxaeFVWUkdhbFp0VWpCWk1HUjNZV3hLV0dWRmNGWk5ha1V3V1ZSR1QxSXhaSEZXYkhCcFZqTm9SRmRYTVRSVE1WbDRWRzVPVldKR1drOVdiR2hEWkVaYWNsVnJaRkpOVlhCNlZsYzFRMWR0Vm5SVmEzUldWa1ZhVEZsc1dsTlhWMDVIV2tkc1YxWkZXalJXTVZKUFl6RlNkRkp1U2s1V1JuQldWbXBPUTJSV2NGaGpla1pVVW1zMVZsWlhNVWRWTURGSVpFUk9WMUp0VWpOV2JYTjNaVWRPUjJGR2FHbFhSMmhRVjFaamVFNUhTWGhWYkZwV1lrWndVRlpzVWxOT1ZscEhXa2QwVmxac1ZqTlZNblJMVjBkS1ZWWnJlRnBoTVhCNlZqQmFWMWRGT1Zaa1JrNW9ZbGRSTWxacldtRlZNazV5VFZWYVQxWldXbE5XTUdSVFdWWnNXRTFWTld4aVJrb3hXVEJqTldGSFNraGxTR2hXWWtaS1dGWXllRnBrTURGVlZXeFdUbFpyY0RGWGExSkhaREZPUjFSdVVteFNWRlpVVkZaYVZtUXhXWGhWYTNSVlRXdHdWMVJzVWxkaE1ERjBWV3hDVm1FeFdrZFVWbHBUWkVkS1NWTnJPVTVTTTJoSVZsWmpNV0V4WkhKTldGWm9Va1Z3WVZwWGRIZFdNV3h4VVc1a1UwMUViRVpXUjNNeFZqRkplbFJxVGxkU00xSlVWVmN4VW1WSFNrbFNiSEJzWVhwV1VWZHNZM2hpTWs1WFdrWm9hbEpXY0ZCV2JURTBWMVphUjJGSE9WWlNiSEJKVjJ0U1QxZEhSWGxWYTNoYVlURldORlV3V21GV1ZsWnpZMFUxYUdWc1dYZFdhMk14WXpKT2NrNUlaR2xTVjNoUFZXcEtVMk5XYkhOWGJIQnJUVmhDU0ZsVlZqQmhNVnBZWlVWV1YxWjZSbWhXUnpGWFl6RmtkVlZzVmxkTk1FcDRWMnhhVm1WSFRsZFZiR3hxVWxSV2IxbHNaRkpOYkZwSVpFZDBWR0Y2VmtoWk1GWnZWa1phUmxOck9WcFdNMmhYV2xkNGEyTXhjRWhTYld4VFZrVmFORmRYZEd0aU1WSnpVMnRrVjFaRldsWlpWM1IzVkRGU2NWRnVUbFJXVkVaSlYydGtSMkZYU2tkaU0yaFhUVlpLVUZaVVNrOVRSazVaWWtVNVUwMXNTbUZXUm1ONFZUSk5lR05GV2xoV1JscHhWV3BCTVZOR1VYaGFSemxhVm10c05GVXljRmRYUjBwSVlVWkNZVll6VVhkVmEyUkdaVlp3U0dWSGVGZFdWbkExVm1wQ1UxTXhTbkpOU0dSUFYwVmFhRnBYZUV0aFJsWnhVbXQwYWxac1NsZFhhMXBoWWtaS2RWRnJXbFppUmtwRVZrY3hWMlJIUmtoUFZtaHBVakZLV1ZkV1ZsWk9WbHBYVm14V1ZtSlZXbFJVVlZKWFpERmFSMXBJWkZkaGVrWkhWR3hTWVZsV1NYcGhSWFJXWVRGS1JGbHRlR3RXTWtaR1pFZDRWMkpZYUdGWFZsSktUbFpTUjFkcmJGVmlWRlpWV1ZSR2NrMUdjRmhqZWtaWVVtMVNXbGxyVlRWaVIwVjVaSHBHVjFKdGFETldSekZYVm1zNVZsWnNWbGRTVlhCb1YxWmplR0l5VG5OYVJtaHFVbXR3YzFac1VsZFdiR1J5V2tSU1dsWXdjRmhXYlhCWFZsVXhXRlZyWkdGU1JVVjRWbXhrUjA1c1VuTmpSM2hYVmxaVmVGWlVSbGRVTVZWM1RWVm9VMkV5YUhCVk1HaERWR3hhY2xWc1pHbFdiVko0VlRKNGExUnNTblJhUkZaWFVucFdhRmxXWkV0V01rNUpXa1pvYVdKWWFERlhWRUpXVGxVMVYxSnVWbEppVlZwdlZtcEtVMlZXV1hkaFNHUlZZWHBHV0Zrd2FFZFdSbHBHVGxVNVdsWXpVbnBVYlhoVFYxZE9SbU5GT1ZOV1JWVjVWbXhqZUdNeFZrZFRXR2hVWW10S1ZsbFVSa3RUTVZKWFZsUkNiRlpzY0RCVVZtUkhWakZLV0dNemFGZE5WbkJVVlZkemVGWnJPVmRXYlVaVFRUQktURlpXVWtOV2F6VlhWR3hhVldKWVVsaFZiWFJoVmpGWmVXUkhSbGhXVkVaR1ZXMTRSMVp0UlhoWGJHUmFZbGhTZWxWcldtdFhSVEZXWTBaS1RsWllRakJXYTFwdlpERlplVk5zV2s1WFJWcGhWRlJLTkZReGJGaGpNMmhQWWtaS1dWa3dZekZpUjBZMlZtdHNWazFXU2xSWFZscEtaREpGZWxwR1ZsZE5NRXBZVmtaU1IyUXhaRWRhU0ZKc1VsUldiMWxzYUc5a2JGcEhWbXhPVjJGNlZsZFVhMmh6VmxaWmVWVnJkRmRoTVVwRVdXMTRUMk5XUm5OYVJscE9WbXh3TlZaRVJtRlVNV1JXVFZWV2FWSnJjRmRaYTFwV1pERnNkR1JFUWxkU2ExcDRWMnRXZDFWck1WWmpTRkpYVW5wV00xbFhNVmRqTWs1SFlVWmFWMUpyY0ZCV1YzQkNaREF4VjFWdVVrNVdXRkp3Vld4U1IxTldWWGhWYTA1VllsVmFlVlJzYUVOV1ZtUkpVVzFHWVZZelRqUlZNRnBoWkVkR1IxRnNaRk5XYmtJeVZtdGFWMkV4VW5KTlZtUnBVMFZhVmxacVNsTlZiRnBWVVd0MFQySklRa2RaVlZZd1ZHeEpkMkpFVm1GV1YyaG9XVlJCZUdNeFpIRldiRkpPVW01Q1JWWlVSbUZXTVVsM1QxWmtVbUpHY0hOV2FrNU9aV3hWZUZadGRHcE5hM0JYV2tWV2MxWlhSbkpYYlVaYVlsaE5kMXBFUm5KbFYwcElUbGRvVGxZeVkzbFdNV2gzVkRGU2NrMVlUbGhpYTNCV1ZGVmFTMUpHYkZoamVsWlhWbTFTTUZsclpFZFdNVXBXWTBoa1YxSXpVbFJWTWpGWFl6SktTVkpzVmxkU1dFSlFWMnhrTUZNeVRYaGFSbVJXWW10d2MxVnRNVFJXYkZaWVRWaGtWVTFXYkROWmExSmhWbFpLVms1VlRtRlNSVWt3Vld0YVIxZFhUa1psUm1SVFVsVlZlRlpVU25kVU1rVjVWR3RvVkdKclNtRlVWRUpMVXpGVmQyRkZPV2xpU0VKNlZrZDBUMkZXU1hkalJYQlhVbnBGTUZVeWVFOVRWbEowVGxaU2FFMVhjM2hYVmxKQ1RWWk9SMVpzVmxWaGVteFlWVzE0VjA1V1drZFZhM1JhVmpCd1NGa3dWbGRWYlVwVlVteEdWbUV4V2pOWk1GcFRWbXhXY21SSGFGTldSbHBYVmxSSmQyVkdVWGxXYmxKVlZrVmFWbFJXV2t0V01YQldWMjVPVDJKRmNGcFpWVlUxVm1zeFJsWlVSbFpOVmxweVZtcEJNVk5HVW5KaFIzaFVVbTVDYjFaWGNFZFdNbEp6Vkc1S2FGSnJOWEJVVjNSaFYyeGFSMkZHVGxaV01IQkdXV3RWTVZack1WZFdXR2hXWWxob1NGbDZSazlqYkdSelUyeGtXRkpVVlRKV1ZFWlhWREZWZUdOSVNrNVdSbkJZV1d4U1IxUXhiRmhOVlRsUFZteEtXVmt3VlRGaVIwWTJVbTVvV0dGck5UTldSRVpLWkRKR05sRnNhR2hOYkVwTVZrWldWbVZIVGxkWGJGWlZZbFZhV0ZSV2FFTmxiRnBIV2toa2FrMXJXa2RVVmxaWFZqRmFSMWRzUWxWV00wNDBXa1JHVW1WdFNrWlRiV2hPVmpKamVWWnFSbE5STVZKelYxaGthVkpHY0ZsWlZFWkxWVEZ3VjFaVVZsaFNhelZXVm0xNFExVXhTbkpqUkVKWFVtMU9ORlZ0TVZkak1rcEpVbXh3VGswd1NsSldiWEJEWkRKU1IxcEdhRTVXV0VKUVZXMHhNRTVXVm5STlZ6bGFWbXh3U1ZkclVsZFdSbHBYVW1wT1dHRnJTak5WTVZwWFpFVTVXR0ZHYUZOV1JWWXpWbXhXYTAwd05WaFRiazVxVW0xNFYxbHNXbmRqUmxKVlVWUkdhVlp1UWtsVVZsWnJZa1phV1ZWclZsaGhNbWhFV1ZkNFJtVldVblZqUmxKWFZsUldWVll5TVhwTlZUVnpZVE53YWxJd1dsaFVWbFpXWkRGYVIxWnRkRlZoZWxaWFZHeG9VMVpIU2xsaFJUbFdZV3RLZVZwRVJsTlhSMDVHVDFkb1YxWkZWWGxXYWtadlpERlNjMU5ZYUZoaVZHeFdWRlphUzFOR2JGWldXR2hVVW14S1ZsVnRlSGRoUjBZMlVtcE9WMUpGTlhwVlZ6RkdaVWRHUlZkc1ZtbFhSa3B2Vm0xd1EyUXlTWGhWYkdocVVsVTFiMWxZY0ZaTmJGcEhWV3RrVlUxc1dubFpNR2hUVmxVeFNGVnJlRnBXYkZWNFZteGFkMU5IVmtoU2JXaHBVbXhyZDFacVJtdGtNazUwVlZoa1QxZEZXbFJaYkdRMFZERlNXR042Um1waVJUVlhWbFpvYTFsVk1VaGxTR1JhVmxkU1VGWXhXa3BsUms1VlZXeGtUazB3U2toWGExWldUbFpaZDAxV2FGVmlSM2hVVkZaV2NrMUdXa2RYYlVaUFVtMTBORmt3Vm10aVJrbDNUbGRvVmsxSGFISlViRnBhWlcxT1JsTnRkRk5XUmxwSlZrWmFhMVF4WkZkVFdHaFVWa1pLVmxacVRrTlhSbVJZWXpOb1UxSlVSa1pWYlhoelZtc3hkVlZ1WkZkU1JUVjZWVlJLUzFkR1RsbGpSbEpwVjBkb2FGWnRjRUpOVjFKelZHeGFWV0pVVm05VVZtUnJUbFphVjFWclRscFdhM0JKVmtab2IxWlhTa2RUYlVaaFZqTm9NMXBGV21Ga1IxSkdUbFpPVGxZelRqTldhMXBxWlVaT2RGVllaRTVYUmtwVVZtdFdZVlF4YkhOWGJrcHNZa1pLTVZrd2FFdFVNVnBWVm14YVZtSlVSak5XUjNoaFVteGFXV0ZHVWxkV01VcEpWMnhrTUdNeFNrZFdibEpZWVhwV2MxbHNaRTlPYkZwSFYyeE9WbUY2UWpSWmEyaFRWakpLVlZKck9XRldla1p5VkcxNFVtVkdjRWRVYldoT1VrZDRXbFpYTUhoa01XUjBVbTVPYVZKR2NGWlphMXBMVmtac1dHTXphRlJTYXpVd1ZGWlZOVll4U25Sa1JGcFhVak5TVkZsWGN6VldNVVoxVVd4YWFWWnVRbEZXYlhCRFl6QTFjMVZzWkZaaE0wSlBXV3RrTkZkV1ZuTlZhMDVXVW14d1IxVXlOVk5XVmxsNlVXMUdWVlpGV2pOWk1XUkhVMFV4Vms1V1RrNVdNMk40Vm10U1IyRXhXWGxTYTFwT1YwVmFWMWxzWkc5VU1WcHhVbXhrVDJKR1JqUldWM1IzWVd4S1dHVkZjRnBsYTNCeVdWVmFXbVZIU2tsWGJGSlhZbGRvUlZkc1dtRmtNV1JIWTBWb1dHSlhlRmhVVlZwelRURlplRlZyZEdsaVZXd3pXV3RvUTFWR1dYaFhhM2hXWWxoQ2RsUnRlR3RqYkhCSFdrZG9WMkpZYUZkV1ZFWnZZVEZrZEZadVVsVmhiSEJXV1d0YVMyTldjRmRYYm1ScVZqQmFTVmxyV25kaFIwcEhWbXBhVjAxdWFISldNbk40Vm1zeFYyRkdVbGRTYkhCUVZsZDBZV013TlVkYVJtaHFVbFJzYjFscmFFTlRSbkJXV2tVNVZWWXdXbGhWTWpCNFZsWmFSbU5HVWxwaE1YQjZXa1ZhUzFkWFNrWk9WazVPVWtWSk1sWnJXbTlrTVZweVRVaGtUbGRHU2xsV2ExcExXVlpzYzFadVNteFNiRXA0VlRKNGEyRldXbFZXYkZwV1lsUkdlbFpWV21GU2JFcFpZa1pXVjJKV1NreFhiR1EwWTIxV1YxWnVVbFZpUjNoVFdsZDRTMlZXV1hkaFNHUlZUV3RXTkZrd1dtOVdSMHBZWVVVNVdsWXpVa3haTVZwVFpGZE9SazVWTlZkV1JsVjVWbFJKZDJWR1ZrZFRXR1JxVTBWS1ZsbHJXa3RqYkd4eVYyNWthbFpzY0ZwWlZWcDNZVWRLV1ZWWWNGZFNla1l6VldwS1IxWnJNVWxpUmxacFYwWktZVlpYTURGaE1ERlhWRzVLV0ZaR1NuTlphMmhEVTFaYWRFMVlUbGhpUm5CSFdXdFNUMWRHWkVsUmJrWmhWak5OZUZac1duSmxiVXBJVW0xb2FWWXlhRE5XYWtaclpERmFjazFJYUdwU2JXaFpWbXRXWVZReFduRlJia3BPVm14S1YxWlhlSGRpUmtwMFpVaG9WMUo2UmpOWFZscEdaVVpLY1ZOc1VsZE5ibVEyVmpKd1EyUXhTWGRQVlZaVFlraENiMWxZY0VaTlJscEhXa2hrV2xZd1draFphMXBYVm14YVIxZHJPVlpoYTFwNlZHeGFVMlJIVGtoa1IyeFhWa2Q0U2xacVJtOWhNV3hZVW01S2FHVnJXbGxaYTJSVFVqRndWMVpVUmxSU2EzQmFXVlZrUjFZeFNsVlJXR2hYVW0xU2Vsa3llSFprTWs1SlVXeG9WMDFzU25oV1JsSkhVekExVjJFelpGcGxiRnB6V1ZST1UxSldXbGhOVjBaVlRWWnNNMWxyVW1GV1ZscHpVMnQwVlZZemFIcFdNRnBMVmxaR2MxRnNaRk5XV0VGM1ZtdGFhMlF4WkhKTlNHaHFVMFZhYjFWdWNFZFVNVlp4VW01T1QxWnNSalJYYTFwcllVWktWVkp1YUZkV2VrWjJWa2Q0V21WR1duRlhiRlpPVm10d1RGZFljRU5qTVVwSFZtNVNXR0Y2Ykc5WmExWmFUVVpaZUZwSVpGVk5hMVl6Vkd4V1YxWkdXa2RYYlVaYVZucEdObFJWV2xOamJIQkhZMGQ0VjJKWWFGZFdhMk40WXpGUmVWWnVTazVTUlZwWlZtNXdSMkZHYkZkWGJrNXFWakJhU1Zrd1duZFdNREZIWTBod1YxSkZTbFJWTWpGUFVtMVNSMVZzU21oaVZrcE1WbFpTUjFNeVNsZFZiR2hxVW01Q1QxbFljSE5UVmxaMFRVaG9WV0pWY0ZoVk1qVkxWbFV4V0ZWcmRHRldWbFkwV2tWYWExWldSbkpQVm1SVFlURldORlpxUmxOVE1VcDBWVmhvYVZKc1dsUldNR2hEV1Zac1dHUklaR2xOVjFKNVZsYzFTMVJzV2xWV2EyeFhZa2RTY2xaV1dsWmtNVTV4VjIxR1UySldTazFYYkdONFZURk9WMVJzYUZCV1dGSlVXVmN4YTA1R1dYaGFTR1JWWWxaYVIxUldhRWRYUjBwWVlVZEdWMkV4Y0VkVVZscFRWbXh3UjJOSGVGZFdSbG8wVmpKMGFtVkdWa2RUV0docFVrVTFXVmxzYUVOVE1WSnpWMjVrV0ZKcmNGcFphMVUxVlRBeFIxZFVRbGROYm1oVVZrZHpNVlpyTVZsUmJYUk9ZbFpLZUZaR1VrZFRNRFZYWVROa1dtVnNXbk5aVkU1VFVsWmFXRTFYUmxWTlZtd3pXV3RTWVZaV1duTlRhM1JWVmpOb2VsWXdXa3RXVmtaelVXeGtVMVpZUVhkV2ExcHJaREZrY2sxSWFHcFRSVnB2Vlc1d1IxUXhWbkZTYms1UFZteEdORmRyV210aFJrcFZVbTVvVjFaNlJuWldSM2hhWlVaYWNWZHNWazVXYTNCTVYxaHdRMk14U2tkV2JsSllZWHBzYjFsclZscE5SbGw0V2toa1ZVMXJWak5VYkZaWFZrWmFSMWR0UmxwV2VrWTJWRlZhVTJOc2NFZGpSM2hYWWxob1YxWnJZM2hqTVZGNVZtNUtUbEpGV2xsV2JuQkhZVVpzVjFkdVRtcFdNRnBKV1RCYWQxWXdNVWRqU0hCWFVrVktWRlV5TVU5U2JVMTZZMFpXYUdFd2NIaFhWM2h2WWpKTmVHSklVbWxTZWxadlZGWmtiazFzV1hoVmEwNVZZa1pzTTFsclVtRlhSMFY0VTJ4T1lWWnNWVEZXTUZwUFZsWmFjMUZzVGxOaE0wRjNWbXRhYW1WR1NuUldiazVwVTBWYVlWUlVUa05WVmxweFVXNWthMUp0VWxsVVZsWjNWREZLZEdSRVZsWmlWRVoyVjFaYVlWTkdjRVZXYkZKT1ZsUldOVlpIY0VOak1VcEhWbTVTV0dGNlZtOVphMlF3VGxaYVJWRnRkRk5OYTNCWFZGWm9VMVp0U2xsVmJFWlhZV3RLZWxScldsTlhSVEZYWTBVMVUxWkdXbGRXYkZwVFZqRmtjazFZU2xkaGF6VlpWbTE0UzFJeGNGaGxTRTVxVm1zMU1GbFZaRWRWTVVsNlZHcFNWMUl6VW5KV2JYaDJaVVpHYzFWc1NtaGhNSEI0VjFkNGEwNUZNVWRVV0dSb1VsUnNUMVp0TVRSTlZscElZMFZPYUdKVldsbFhhMmhMVjBaT1NWRnJkRlZXTTAxNFdURmtSMU5IUmtoU2JXaG9UVEJLTlZacVNqQlZNazE1VW14YVRsWnNXbFZaYkZKSFZVWldjbGRzV210TlZrWTBWMnRWTldGR1NsVlNhMnhXWWtkb2RsWkhjM2hqYlVwRlZteG9WMkpXU2xSV1IzaFdUVlphVjFadVVteFNWRVpUVkZWV1dtVnNXa1pXYXpsU1RXeGFNRlpYZEhOV1IwcDBWVzVDVlZaRlJqUmFSM2hQWTJ4a1ZWVnRlRmRXUmxvMFZtcEdVMVV4WkhOWFdHaHBVa1phV1ZsVVNsTlZNVkp6VjI1T2FsWnJjRnBaYTJSSFlVZEtSbFpxVWxkU00xSlVXWHBLUjJNeVNrZFdiRXBwVmpKb1VGWnRkRlpOVjA1SFZXeG9UbFpYVW05VVZWSnpWbXhhYzFWclRscFdiRlkyVjJ0ak1WWkdXWGxsUlU1YVZteFpkMVpyWkVabGJFWnpVVzE0VjFaWVFYcFdha2w0WXpKS2RGSnJhRk5pUjNoV1dXMDFRMkZHV1hkWGEyUnJZa1UxZVZZeFVsZGhSa3BWVmxSS1YwMVdTbFJXVlZwS1pVWk9kVk5zYUZoVFJVcEZWMWQwVm1WR1pFZFdiR3hvVWxSc1ZGVnNVa0prTVZsNFYyMTBWMDFyY0VoWmExcFhZVWRXY2xOc1JsWmhhMXBNV1RGYWExZEhUa1pqUlRWWFZrWmFSMVl4YUhkVU1XeFhWMjVXVldKcmNGbFZNR2hEVXpGU1dHTjZSbXBXTUZwSldWVmtSMkZIUlhwUmJteFhUVzVTVkZsNlNrZFdhekZYVm14U2FWWkZXbEZXVjNSaFZtMVJlRlZZYUdGU1ZHeHZWV3hTUjFOV1ZuTmhSemxWWVhwR2VWbHJVbGRYUmxwMFZXeE9WV0pHVlhoV2JGcFhaRWRXUjJKR1drNWliRWw2VmxSR1YxUXhWWGhqU0U1cFVteGFZVnBYZEhkVlZsWnlXa2M1YW1KSFVubFhhMVV4WVRBeFdWRnNXbFppVkVWM1ZrZDRZVkl4U25GWGJGWk9VakZLU1ZkWGRHRmtNV1JIVTJ4V1YyRjZiRlJWYWtwdlpWWlplRlZyZEZSaVZscFhWR3hhVjFac1drWk9Wa0pWVmpOb2FGbFdXazlqYkdSVlZXMTRWMVpHV2pSV2FrWlRWVEZrYzFkWWFHbFNSbHBaV1ZSS1UxVXhVbk5YYms1cVZtdHdXbGxyWkVkaFIwcEdWbXBTVjFJelVsUlpla3BIWXpKS1IxWnNTbWxXTW1oUVZtMTBWazFYVGtkVmJHaE9WbGRTYjFSVlVuTldiRnB6Vld0T1dsWnNjSGhWVnpBeFZteEtjazVWVGxwV1JWcDJWRzE0VDFaV1RuSlBWMmhwVmpKb01sWnFTWGhrTVUxNVVsaG9hbEpXV25CVmFrbzBWREZhY2xadVpHdFNiRXA1VmxkNFlWUnNTbFZpUm14WFVucEdkbFpIZUVwa01WcHhWV3hXVjFKWVFreFhiRnBoWXpGa1IxWnNWbGRoZW14WVZXMTBkMlZzV2tWVWJrNVNUVVJzVjFsclZuTlViRWw1Vlc1U1YxWkZTa3RVYkZwUFZteHdTVlJ0YkZkWFJrcEtWMWQwYjJReVJuSk5XRTVZVjBkU1ZWUlZWVEZXUmxKV1drVmtWRkl3Y0VwWk1GVjRWakZLUjFkdVVsZGlSa3BFVm1wR1ZtVkdaSFZUYkdScFVsUldZVlpHV21Ga01VVjRWMnhvYkZKVWJHRlpWRWsxVGtaYVNHUkhSbGRpVlhCSVdUQldhMVl4V1hwWmVrWlhVa1ZhU0ZadGMzaFdiR1J5WkVVMVYxSlZiM3BXV0hCSFZERkZkMDVJWkdsU1ZrcFhXV3hhZDFReGJGaGxTRXBzVm14R00xZHJWbXRoVmxwVlVtcENWMVo2UlhkV1ZWcGFaREpLUlZWc1ZsZGxhMXBvVmtaV1ZrMVdXbGRXYkZaWFlraENUMWxVUmxwbGJGbDRWMnhPVTJKV1ducFphMmhIVmtkS1dHRkhhRlpoTWxJMldsVmFVMk5zY0VkWGJVWk9WbFZ3VmxaV1kzZE5WbXhYV2tWa1ZHSnNjR0ZaVjNNeFZVWlNWbGR1VG10V01IQktWbTE0ZDFZeVZuSlhibkJXVFZaYVVGbHRNVVpsVmxaeVlVZG9WRkpWY0hoWGJGcFRVVzFPYzFwRlZsTmhlbXhVV1d0YVlXVnNXWGxrUjBaWFlsVndSbGxyV205V2JGcHpZMFY0VjJFeGNISlViRnAzVWpGV2MxUnNaR2hOTUVwYVZteGtORmxXVFhoalNFNVdZbXR3VkZsWWNGZFdSbHBWVTJ4T2FFMVZNVFJXVnpWM1dWVXhjbGRzYkZkTlYwMHhWVEo0V21WWFZrVlhiSEJzWVROQ1dWWkdWbGROUmtwSFZtNVNXR0pJUWxoVmFrRjRUbFphUlZGc1RtbE5hMVkwV1RCV2IxWldaRWhWYldoWFlURmFhRmt5ZUZOV01WWnpVMjE0YUdWdGVFcFdWekI0VGtac1YxZFlaRmRXUlZwV1dWUkdTMlJzYkZWU2JrcHNWbXMxV2xsclZUVldNVXB5Vm1wYVYxSXpRa3hXYWtaelkyMU9SbHBHUWxSU00yaFJWMVprTkdOck1VZGFSbVJoVW01Q2MxWnROVU5UVmxwWFZXeGtXR0pWV25sV2JYQlhWMGRLV1ZGc1RsVldiRlY0Vld4a1MxTkhUa2RqUm1SVFZsaENNbFpyV21GVk1WRjVVbXhhVGxkR1NsUlpiR2hUVlZaYWNsZHNXbXROVjFKNlZqRm9hMkZzU2xsVmJGWldWbTFSZDFZeFZYaGpiRnBaWTBaV2FWZEZTakZXUjNSaFpERk9SMVp1VW1wU1ZGWlVWRlphV2sxR1dYbGtSazVUWVhwR1IxUldVbUZoUmtsNVlVZG9WMkZyV21oWmFrWlNaVVpXYzFOck9WTmlhMHBLVm10amVHTXhVblJTYms1WFYwZFNWbGx0TlVOamJHeHlWMjEwVDFac1dqQldNbk14WVVkS1NHUkVWbGRTUlVweVZXcEtTMVpyTVZsVmJGcHBWMFpLVWxadGNFTmpNRFZIVld4b1RsWnVRazlWYkZKWFZteGFWMVZzWkZoaGVrWjVWbTF3VDFkR1duTlRhMlJoVmpOb2Vsa3hXazlrUjBaSVVteE9VMDB3TkRCV2EyUXdZVEZaZUdORldtbFNWbHBQVldwS1UxUkdWblJqUnpsUFZteEtNRmt3V25kVU1VcDBaVVpzVjAxWGFIcFhWbHBLWlVaS1ZWSnNhRmROTUVwSVYyeGFZV1F5VGxkV2JGWlRZWHBzVkZWcVRtOWxSbGw0VjJ4T1VrMXJXa2RVVmxwWFZsZEtXR1ZGT1ZwaVJscG9XVEo0VW1WR1ZuTlhhelZUWW10S1YxZFljRXRoTWtwWFZsaGtWR0p0VWxsWmJHUTBaR3hyZDFwRk5XeGlSa293V2xWa01GVnJNWFJWYm14WVlURmFjbGxxU2s5VFJsSnhWbXMxVWsweFNtRldSbHBXVFZaSmVGZHNhR3hTTUZwVVdXdGFZV1ZzVVhoWGJYUldZa1p3ZVZrd1dsZFdNREI1WlVoS1YyRXhjRXhXYWtaUFl6RndSMVJzWkdoTk1Fb3dWbXhhWVZZeFZYaFRiR1JYWW10S2FGVnFSa3RVVmxwVlUycENhV0pJUWxwWmExWkxZVVV4V0ZwNlNscFdWMUo2VmpJeFYyTnNaSFJQVm1oWFlsWktURlpIZEZabFJscFhZa1JhVkdKRlNsaFVWV2hEVFVaYVIxZHRkRlZpVmxwSFZHeGFWMVV4V2tkVGJFSmhWak5TZVZwWGVGTlhSMDVIVjJzNVUxWkZXa2RXVm1ONFRVWmtkRkp1VG1sU1JscFZWbXhhUjAweFpIRlNibHBzVm14d2VGVlhNVzlWTWxaMFpIcEtXR0V4V25KVmVrRXhWakpLUjJGR1dtbFhSa3A0VjFaYVYxSXlVbk5VYmtwb1VtczFjRlJYZEdGWGJGcEhZVVpPVmxZd2NFWlphMXBYVm0xS1IyTkZlRmRoYTFwTVZtcEdUMlJHWkhOYVIyaE9VbTVDVmxadGVGTlNNbFowVTI1T1YxZEhVbGhaYTFVeFYwWnNWVkp0UmxkU2JWSkdWVmQwYTFVeFduSmpSV2hXVFZkTmVGWXhXbFpsVjA0MlZHeFNWMVpVVmxWV01qRjZaVWRPVjFwR1ZsUmlSVXBVVkZWYWQwMUdXa2RaTTJoV1RXdFdNMVF4V205V1JtUklZVVU1V21KR2NIbGFSRVpUWXpGV2MxTnJPVmRpV0ZFeFZsZDRiMkV4WkhOWGExcFhZV3h3V1ZacVRrTlVSbXhXVjI1a1UxWXdXVEpWYlhNMVZUQXhWMWR1VmxkV1ZuQlFWVlJLUzJNeVRrZGlSbHBwVmtkNGQxWkdVa0pOUjFGNFdrWm9UMWRGTlhKV2JURTBWMVpTVjFwRVVsUmlSVlkxVjJ0b1MxZEdUa2xSYmxwYVZteHdlbFJ0ZUV0a1IwWkhZMFprVGxJelRqTldhMXBoVlRKR2NrMVlTbEJXYldoVldXeFNSMVF4V25GUldHaFBVbXhLZWxaWGRHRlVNVXBWVmxSS1ZrMVdTbEJXUnpGSFl6RmFWVkZzVmxkV2EzQkZWMVpTUjJNeVRsZGFSbXhwVWxob1dGVXdWVEZrVm1SWFYyMTBXR0pWYkROWmExcHZZVlpPU1ZGdVJsVldNMmhoV2tSR1RtUXhVbk5VYlVacFVqTm9WMVl4YUhkVE1WWkhVMnRvYUZORmNGbFpWRXBUVkRGd1JWSnVaRmRXYTNBd1drVlZNVll4U25KWFZFcFhVa1ZLY2xWcVNrdFNNazVIWVVaT1YxSnNjRkZXVjNScllqSk9jMXBHVmxSaE0wSnpWbXhTVjFac1dsZFZhemxWVFVSR2VsWXlNWE5XUjBWNFlYcENZVlpzVlhoWk1WcHJWbFpXYzJOR1pFNVdNMk40Vm1wS01HRXhWbkpPVm1ScFUwVmFWRll3WkRSaFJteFlaVVZhYkZKc1NubFdWelZQWVVkS1NHVkdXbFpXZWtaMlZrZDRZVkpyTlZsUmJGWlhaV3RhU1ZkV1VrSk9WbHBYVjJ4V1VtSlZXbGhaVjNSTFRURldObEpyT1ZKaVZWWTBWMnBPYzFVeFdrWk9Wa0phVm5wR2NWUlZXbXRqYkhCSFZHMW9hR1ZyV2twV2JYaHZZakZzVjFOcldsZFhSMUpXVmpCb1EyUnNiRlpYYm1SWVVteHdNRmxWV2tOV01VcHlWbGhrVjAxdVVuSldSRXBIVm1zeFdWSnNaRmRTVlhCUlYyeGplRlV5VFhoWFdIQnBVbXMxYUZsWWNFZGxSbGw0Vld0MFZsSnJiRE5XTWpWVFZsWmFObEpzVWxwV1JVVXhWakJhVDFkWFJrWk9WMnhYWWxoUmVsWnJaRFJWTVZaeVRsWmthRTB5ZUZSV01HUlRXVlphY2xac1pFOWlSMUpaV1RCV01HRkdTblZSYTFwYVYwaENTRlpFUmtwbFJtUjBaRVpTVjFacldYcFdNbkJEWkRGSmQwOVZiR2xTVkd4dldXdGtlbVF4V1hoWGJYUllZbFphV0Zrd1ZtOVdiRnBIVjIxR1dsWXpVbGhVYkZwclpFZE9SMU5yTlZkV1JscEhWMWQwYTJReFpITlhhMXBVWWxSc1ZsWnRlRXRWUm14WFZsaG9hMUpyY0RCYVJWcERWakZLYzFacVRsZE5ibWhVV2xkNGRtVldTbk5oUm1oWFpXMTRUVlpYTVhkaU1EVlhWVzVTYWxKdVFsQlZiVEUwVjFaWmVHRklUbHBXYTJ3MFZXeFNSMWRHV1hwUmEyUmhWbXh3TTFreFdsZFdWa3B5VDFaT1UwMHlhRFJXYWtaaFZURkZlVkpyV2s1V2JGcFdXV3hrTkZReGJITldiVVpxWWtaR05GWlhlR0ZVYkVwMVVXeFdWbFp0VW5aV1ZscFdaREZLZFZOdFJsTldNVW95VjFSQ2ExUXdOVlpOVlZKclVtMTRUMVpzVWxkVFJscHpXa1JTV2xacmNIcFdiVFZQVlVaYWRGVnNUbGRpV0ZJelZteGFXbVZ0U2toa1JtUlRZVE5DV1ZaVVNqUmhNVlY0VjI1S2FsSjZSbGRXYlhoaFZrWldjMWRzWkdwU2JrSkpWbGQwTkZack1VWmhNM0JXVFZaYWNsbDZTa3RXYlZKR1ZXeE9hV0V3Y0hoV1JsSkNUVmROZUdORldsVmlWRlp2VkZaa2EwNVdWbk5WYXpsVlRXdGFNRmRZY0VOWFIwVjVWV3hTV2xZelRqUlZNRnBoVjFkR1NGSnNUbE5XYkZsNlZtdGFiMlF5U1hsU2EyUnFVbTFvV0Zsc1pHOVZWbHB5VjJ0YVRsSnRVbmxYYTFVMVlVWmFWVkp1YUZkaVJrcEVWa1JLVjJSR1ZuVlViR1JPVFc1b1ZWWkdWbXRTTVU1SVUydHNhbEpVUmxoVmExcGhaRVphYzFWclRsZE5WbFkwVmpJMVMxWXlTa1pPVm5CVlZteHdNMVZVUm1GWFIxWkdUMVp3YUUxcWF6QldhMlF3V1ZaYWRGTnJaR3BTVjFKWVZtcE9hazFXVmxobFJYUlRZa1phZWxaSGREQlViRnBHVjI1S1ZtVnJXbEJaTW5oMlpESk9SbHBHUWxkTmJXaFJWMnhrTkdOck1VZFZXR1JoVW1zMWIxUldaRE5OYkZaWVRWUlNWV0pHYkRSVmJYQlRWbGRGZUZOck9WVmhNWEI2VmpCYVlXUkhWa2RqUm1SVFRUQTBlbFpyVWtOaE1WVjVVbTVPYVZORldsVldhMVpoVlVaV2NscEZOV3hpUjFKNlZqSTFkMkZGTVhOVGEyeGFWbGRvUkZsWE1WZFdWa1paVTJ4b1UxSldjRkZXVnpFMFZqSk5lRnBJU2xoaVJuQndWV3RrTkZkV1dsZFhiVVpVVFZad1NGZHJVbGRaVmtwelUyeFNWMkpZVWpOV01GcFhZekZrY21SSFJtbFNWbkJZVm14a01GWXhXblJTYkdoV1lsaFNXVlZ0Y3pGUk1WRjRWbTVPVTFKc1duaFZWekZ2VlRBeGRWcDZTbGRTVm5CVFZGWmFkMk14V2xsYVJtUnBVbFJXV1ZkV1VrZFpWbHBIV2tWV1UySlZXbE5aYTFwaFpXeGFTRTFWZEZSTlJFWlhWR3hXYTFZeFdYcGhSMmhXWWxob1dGbDZRVFZXYkU1elZHeE9WMkV6UWxaV1ZFcDNVbTFSZDA1SVpHbFNWM2hQVldwS1UyUkdXbFZSYTNSclRWZFNNRmxyWXpWaFIwcFdZa1JhVjJKVVZsaFpWRVpHWlZad1NWTnNhRk5TV0VKSVZrWlNRazFYVGxkalJGcFdZbFZhVkZSV1ZuZGxSbHBIVm0xMFYySldXa2haTUZaWFZURmFSbE5yT1dGV2VrWjJXV3BHYTJNeGNFZGFSMmhUVmtkNFYxWnNXbE5WTVd4WFUxaGtUMWRGU2xaV2FrNURWakZTVmxaVVJrOWlTRUpKV2xWV05GWnJNVVpXYm14V1RWWmFWRlZYTVU5U2JVcEdZa1pTYVZkSGFIbFdWRUpoV1ZVMVYySklVbWxTVlhCdlZGWmthMDVXVm5OVmF6bFZUV3RhTUZkWWNFTlhSMFY1Vld4U1dsWXpUalJWTUZwaFYxZEdTRkpzVGxOV2JGbDZWbXRhYjJReVNYbFNhMlJxVW0xb1dGbHNaRzlWVmxweVYydGFUbEp0VW5sWGExVTFZVVphVlZKdWFGZGlSa3BFVmtSS1YyUkdWblZVYkZaT1RXNW9SVmRVUW1Ga01rNUhZak5zYTFKdGVITlpXSEJEVGtaWmVVMVlaRlJoZWtJelZGWm9SMVpHWkVsUmF6bGhWak5TZVZSVldsTlhWMDVIVkcxb1YxWkhlRXBXYkdONFl6RlJlRk5yV21oTk1taFdXVmQwZDFkR2JITlhibVJYVm1zMVZsWnRlSGRXTVVwV1ZtcFNWMUpGV2xSWlZFcEhZMjFLUmxack5WTlNNMmhNVmxaU1MxVXhXbGRXYkdSWFlsVmFWRmxyWkd0Tk1WSlhWMnRPVmsxVmNGaFdiVFZYVmtaYVdGcDZRbFZOUmxwNlZXdGFWMlJHWkhKT1YzaHBVbTVCZDFacldtdGtNa1owVm14YVRsZEZXbFpXTUdoRFZERnNXRTFYZEU5aVJrcDVWMnRXZDFReFNuVlJhMnhXVFZaS1JGWkhNVWRqTVZwWlkwWm9hVkl4U205WFYzUldaVWRPV0ZOcmFHaFNWRlpVVlcxNFZtVkdXa2hqUlhSVllrYzVORlZYZUZkVWJFbDVWV3Q0VlZaV2NHaFdhMXBoVjBkT05sWnNXazVXTWxGNlZrUkdZVkl4VlhoWGJGWldZbXhhVlZSV1ZURlNSbkJYVjI1a1dGWnNXbmhWYlRGM1lWWmFSMU51VmxaTmJsSmhWR3RrVjJOck5WZGhSbWhZVWpOb1VWZHNaREJqTURWWFZXeHNhbEpVVm5OV2JGSnpVbXhhUjFWclRsaGlWVm93V1ZWb1MxZEdXWHBSYkU1aFZteFZlRlpzV25kVFIxWklVbTFzVjJKR2EzaFdhMUpIWVRGS2RGVllaRTlXYkZwdldsZHpNVmxXY0ZoT1ZUbHBZa2QwTlZSV1dtdFViRWw0VTJ4d1ZrMXFWbGhWTW5oR1pWWldjbVJHWkZkV2JYTjNWa1pXVm1WR1NsZFdiR2hQVm10S2MxWnNWbkpOVmxWNFZtMTBXbFpVUmxsVk1qVlRWbGRHY2xOdE9WZGlia0o2VkZaYVQxWnNaRlZXYld4cFUwVktZVlpzWTNoWlYwWlhWMWhrV0dKcldsbFZhMVozVTBac1ZWSnVaRlJXYXpVd1dsVmtkMVJyTVVWU2FrcFdaV3RhVUZWVVFUQmtNa3BHVld4YWFWWnVRbEJYYkdRMFdWZFNSMVZzYUdwU00wSnpWbXhTUjJWR1drZGhTR1JWWWxWYU1GZHJVbUZXVjBWNVZXdDBWV0V4Y0ROVk1GcFBWbFpHY2s1WGFHbFNiRmt5Vm1wS05HRXhiRmhUYTFwT1YwVmFjRlZxU205VU1WWnlWMnhhVGxac1NuaFZNbk14V1ZVeFZsTnNWbFpXYlZGM1dWUkdTbVZYUmtsYVJuQk9UVzVSZWxVemNFZGliVlpYWTBWb2JGSXpVbFJaVnpFMFpVWmtXR05GY0U1V01IQlpWVzE0YjFkck1YRmlSVEZYWVRKb1VGbHRlRTlqYkdSVlZXczFUbEpHVlhsV2EyTjRUa1pzVjFOcmFHRlNSVFZaVmpCb1EyVldVbGhsU0U1clVteHdXbGRyV25kaFIwcEdWMVJHVjFKc1NreFZNakZYWTJzMVdWSnNWbGhTTVVwdlZtMXdRMVpyTVZkVmJHUmhVbFp3Y2xSV1pETk5iRnAwVFZoT1ZXSldXbGRWYkZKWFZrWmFXR0ZHUWxWV1YxSlFXa1phVjJSV1pIUmlSazVzWWxoUk1sWnFTalJpTVU1MFUxaG9WMkV4Y0c5VmJYUmhWMnhTVmxWdVRsZFdhekUwVmxjMWQxbFZNWEpYYkd4WFRWZE5NVmxYYzNkbFJtUjFVV3h3YkdGNlZsVlhiRnBYVFVaS1IxWnVVbGhoZW14eldXeFZNRTFzV1hsbFIzUldZWHBXUjFSV1ZtOVdWbHBIVjJ4Q1dtSkdXak5aZWtaVFZteHdSbU5GTlZOV1JWbzBWbXRqZUdNeFVuUldiazVwVWtad1ZsWnNaRk5YUm14V1ZsUldWMVpyY0RCWlZWVXhWVEF4UlZGcVVsZE5WMUl6VmtjeFRtUXlTa1pXYkVwWVVsUldURlpYZEZabFIxRjRWbXRrVmxkSFVuQlpiRnBIVGxac2NtRkdaRlJOYkZwWldrVmpNVmxXWkVobFJVNWFWa1ZhZFZwV1dsZFdWa1owVW14T1UwMUVSVEJXYTJRMFZURmtkRlp1VG1wVFJrcFlXV3hvVTFReFZuRlNia3BPVW14S1dWUldWbmRoTURGRlVtcENWbUpHU2toV1J6RkxWakpGZW1OR1ZtbGlhMG8xVmtkNFZrMVdXbGRUYmxKcVVsUldXRlZzV2xkT1JsVjRWbXhLYTAxWE9UUlpNRnB6WVVaT1NGVnVRbFppYmtKNldUSjRhMk14VW5ST1YyaE9Za1Z3U2xkV1ZtOVJNa1owVm14V1VsZEZjRmxWYTFaS1RVWlZlV1ZHVG1waVJuQjVWa2Q0WVdGRk1WZGpSVkpYVmtVMWVsUlVSblprTWs1R1drWkNWRk5GU2xGV2JYQkhZekExVjFWdVZtcFNXRUp6Vm14U1JrMXNXa2RoU0U1V1VtdHdSMVJWYUd0WFJsbDZVVzVhV2xaRlducFpNVnBYVjFkS1JrOVdaRk5OVlhBMlZtcEpkMlZHV25SV2JGcFFWbTFvVkZZd1pGTlZSbHB5V2tod2JHSkhVbHBaYTJoTFZEQXhTR1ZGYkZkTmFsWm9XVmN4UzFZeFpIUlBWbWhYVWxoQ01WWXljRU5OUmtwSFZtNVNXR0pWV2xSVmJYUjNaVlphU0U1WVpGZGhla1pYVkd4b1IxWlhTbFZTYldoWFlXdGFTRlJVUm10a1IwNUlUbGQ0VjJKWWFEUldWbHB2WXpGa2MxZHJaRmRoYkZwWldXeG9RMk5XVWxWUlZGWlhWakJaTWxWdGN6RldNREZGVWxSQ1YxSnNjRlJXYlhoMlpVZEtSMkpHVmxkTmJFcE5WbGN4ZDJJd05YTlZXR1JXWWxoQ2MxVnNVbGRTYkdSeVdraE9XbFpzYkRSWmExSmhWbFV4UjFOck9WVmlSbkF6VlRCYVYxWldXbk5qUm1ST1VrWmFNMVpyWTNoa01WSnlUVlphVDFaWGFGWldNR1JUV1Zac2MxZHVTbXhTYkVvd1dUQmtkMVJzU2xWV1ZFcFZWbFUwZDFWNlJrdGpWbTk2WVVab1YwMHdTbEJYYkZaV1pVZE9WMXBJVW1oU2JrSllWVzEwVm1WR1drZFdiWFJZWWxaYVYxUnNhRWRaVmtvMlVteEdWbUZyV25wVVZFWnJaRWRPUm1ORk9WZGlhMHBhVmxkNGIyTXhVWGhUV0dSWFlXeEtXVmxyV2t0VU1WSnpWbGhvYWxJd1ZqVlhhMlEwWWtaYVZtTkVUbGROYWtaNldXcEtVbVZXVW5WVmJHUnBWa1phWVZaR1pIZFNNa2w0WTBWYVlWSlViSEJVVldoVFVsWlZlR0ZIUmxWU2EzQXhWa2R3VDFaV1NuTlRibkJhVmxaWk1GWXdXbXRrUmxaellVZDRhRTFHYkROV2ExSkhZVEZLZEZWclpHcFRSVFZQVm1wQ2QxUnNXbkpoUlU1b1RWVXhORmxWYUhkVWJGbDRZMFpXV2xaWFVreFdSM2hIVG14R1ZWSnNhRmRoZWtVd1YxZDRZV0l4V1hsVVdIQmhVbFJHV0ZWcVRtOWtiRnBHVjIxMFdsWnVRa2RhUlZwVFZVWmtSbE5yZEZwV2JXaHlXVzE0VDJOc1pGVlZhelZYWWxob05GWnJXbTlpTVZKMFVtNU9hbEo2YkZsV2JYaExWVEZTYzFaWWFGUlNiVkphV1d0Vk5XRkhTbGRUYWtKWFVrVktjbFl5TVZKbFIwNUpVbXhTVjFKc2NHOVdiWEJEVmpBMVYxVnVTbUZTVm5CelZXMDFRMVpzV2tkVmJHUlZZbFZhV1ZwRmFHdFdSbHBZWVVSYVdHRnJTak5WYWtFMVYwZE9SMUZzWkZOV00xRjZWbXRhVjFVeFJuUldhMXBQVmxaYVZWbHNaRFJVTVd4WVpFZEdhazFYVWpCWk1GWkxWR3hLZFZGdWFGZE5Wa3BRVmpKNFlWSnNUblJQVmxaT1VtdHdlVmRXWkRSa01VcFhWRzVTYVZJd1dsaFZha0Y0VGxaYVIxWnJPVkpoZW14WFdXdFdjMVp0U25SbFJ6bFhZbTVDUkZwSGVFOWpiR1JWVldzMVYySllhRFJXYTFwdllqRlNkRkp1VG1wU2VteFpWbTE0UzFVeFVuTldXR2hVVW0xU1dsbHJWVFZoUjBwWFUycENWMUpGU25KV01qRlNaVWRPU1ZKc1VsZFNiSEJ2Vm0xd1ExWXdOVmRWYmtwaFVsWndjMVZ0TlVOV2JGcEhWV3hrVldKVldsbFpNM0JQVmtaYVdHRkZlRnBoTWxKVVZURmFZV1JYU2toaVIyaFhWbGQzZWxZeFVrcGxSMDE1Vld0YWExSlhlRlpaVjNSaFdWWnNkR042UW10TlYzUTFXV3RqTVdGRk1WaGFSRlpYVW14S1dGWkhNVWRqTVVweFZHeFdWMVpyY0VoV1JsWldaVWRTUjFSc2JHbFNWRlpZVkZaYWQwMUdXa2RXYkU1V1RXdHdWMVJzYUVkWlZrbDVZVVU1Vm1GclNsZFVWVnBUWTFaT2NrOVhhRTVTUlZsM1ZsUkplRTVHVVhsV2JrNXBVa1UxVmxWc1ZURlNSbkJZVFZaT1ZGWnJOVEZaYTJSM1ZUSldkR1I2U2xabGEwcFFWbFJHZDJNeVNrVlhiV2hPVFc1b1VWWlhkRmRTTURCNFZXeGtWbUpGY0hOV2JURTBaVVpWZUdGSE9WcFdiR3cwV1d0U1QxWlhSWGxWYlVaVlZqTk5kMXBXV2t0WFZuQkhZMFprVTAxck5ESldha1pUVXpGV2RGWnNaR2xUUmtwWVZtdFZNVlZHYkZoa1JXUnNZa1UxVjFaSGRIZFpWVEZJWlVoa1dsWkZOVVJXUlZwaFUxWlNkRTVYUm1sU1ZGWkZWa1JHVjJNeFRsWk5WV2hoVWpCYVdGUlVTbTVOYkZsNVpVVTVVazFFVWpOWmExWlRWbTFLVjJOR1FsVldNMUo1VkZaYVUxWXhjRVprUjJob1pXdGFXbFpzV2xOVU1XeFhWMnRhVGxaR1dsbFdhazVEVVRGU1YxWlVWbGhTYkhCV1ZtMXpOV0ZIUlhsak0yUlhVa1ZhVkZWdE1WZGphekZaVld4YWFWWXphRkJXYlhCRFZqQTFWMXBJVG1GU1ZuQm9WRlpXUzFaV1ZsZGFSRUpvVFZWc05WbFZhR3RYYXpCNVpFUk9WR1ZyV25WYVZscDNVMGRXU0dSR1RtaGlXR1ExVmpGb2QxSnJOVlpOV0U1cFVtMTRWVlp1Y0hOVVJsSllZMFZrYVUxWFVscFphMlIzWVdzeFNHVkZWbGRXZWtab1ZrUktWMlJHVW5GWGJHaHBVakZLVkZaSGRGWmxSazVIVld4V1YyRjZiSEJXYkdoRFpXeGFSMVp0ZEZSaGVrWkhWRlpvUjFaWFNsaGxSVGxoVmpOb2VsUnRlRk5XYkhCSFdrZG9VMVpIZUZkV1Z6QjRZakZTYzFOWVpFNVRSMmhaVm1wT1ExUXhhM2RXVkZaUFZtdGFXVnBGV25OaVIwcFlZVWhzVjAxWFVqTlZNbk4zWkRBNVYxWnNjR3hpUlhCUlZtMTBZVkpyTVVkVmJHUmhVbXR3VUZac1VrWk5iRnBIVld0MFdsWXdXbnBXTWpWUFZsWlplbEZ1Um1GV00yaDZWRzE0UzJSSFVraFNiRTVPVW14cmVWWnJaREJWTWtWNVVtNUthVkpXV2s5VmFrcFRZMVpTVlZKcmRFOVdiWFF6VjFod1YySkhSWHBWYTFaWFZucEdhRlpITVZkak1XUjFWV3hXVjAwd1NuaFhiRnBXWlVkT1YxVnNiR3BTVkZadldXeGtVazFzV2toa1IzUlVZWHBXU0Zrd1ZtOVdSbHBHVTJzNVdsWXphRmRhVjNocll6RndTRkp0YkZOV1JWbzBWMWQwYTJJeFVuTlRhMlJYVmtWYVZsbFhkSGRVTVd3MlVXNU9VMUpzV2pCV01uTTFWRzFGZVdNemFGZFNiSEJ5VlhwS1IyTnJNVmRoUmxwWFVsUldiMVp0ZEZabFJUVlhXa1pvYWxKVmNFOVdiRkp6VjFaYWMxVnNaRlZOYTFwNVdWaHdRMVpWTVZkVGEyUmhWak5PTkZwRldsZGtSMHBHVGxaa1RsSnNhM2hXYWtvMFlURktkRlJyV2xCV1JscFRXVzEwUzJGR2JGZGFSM1JxWWtkU1Nsa3dZelZoUlRGWVpVaG9WazFXU2xCV1ZWcGhVMFpTVlZGc1ZtbFNhM0JVVmtkMFZtVkdaRWRXYkZaWFlYcFdjMWxZY0VOT1ZsbDVUVmhrVjAxcmNFZFVWbWhIVjJzd2VsRnRSbUZXTTFKb1dUSjRhMk5zY0VaWGJYaG9aV3hhUjFZeWRHdGtNVkpIVmxoa1ZGWkZOVlZXYkZVeFZrWmtkR042Um10U2EzQXdXVlZhZDFZd01WWldhbHBYVFZkb00xVlhjM2RsUjBwRlYyeG9hVll5YUZGWGJHTjRWR3N4VjFWdVNtRlNiVkp3Vld4U1EwNVdXbGRoU0dSV1VtdHdTVlpYTlV0WFJtUkpVVzV3V2xac1ZYaFViWGgzVG14V2MxRnNUbE5OYkVveFZteFdZVlF4UlhkTlZXaFZZbXhLY0ZVd1drdFVWbFYzVmxSQ2JGSnRVbGxVYkZVMVZHeEpkMDVZWkZoaGEyOTNWakZrVjJOck1VbGhSbWhwVjBWS1RGWkdVa0psUjA1WFZHeHNhbEpVVm5OWlZFcDZaREZhUjJGSVpGWk5hMXBYVkRGV2IxWnRTbGhsUmtKV1lURmFlVnBWV2xOalZrNXpXa2RzVjJKclNsZFdWRVpUVmpGa2MxZHJXbE5YUjJoV1ZGWmFTMk5zYkZoa1JGSlRVbXRhV1ZReFZqQlZNa1owV1ROa1YwMXVVbkpWTWpGWFZtczFWVmR0YUd4aGVsWlNWbGQwWVZadFVYaFZXR1JXWVRKU2IxUlZVbk5XYkZwSFlVaGtWVTFyY0ZoWlZFNXZWMGRLUjFOcmRGVldSVVl6V2xaYVUxZFhSa2hTYkU1T1ZsaENNbFpyV205a01WWnlUVWhvYVZKR1duSlZNR2hEWTJ4VmQxWnVaR3hpUjFKNlYxaHdRMkZWTVVsUmEyaFZUVVpLVUZZeU1VZGtSMUpGVld4b1YyVnJXbEJYYkZaaFpERktWMk5GYUd4U1ZGWnpXVlJPUTJReFdrZFdiRTVYWVhwV1dGa3dXbGRoUjFaeVkwVTVXbFo2Um5GVVZscFRWakZXY2s1WGVGZGlhMHBLVmxSR2IySXhaSE5YYTFwcVUwVTFXVlp0Y3pGbFZtdDNWbXBDVjFJd1dUSlhhMVozVmtaS1dWRnVjRmhoTVZwMlZtcEtWMWRHVG5WUmJFcG9ZVEJ3ZUZkWGVHdE9SVEZIVkZoa2FGSlViRTlXYlRFMFRWWmFTR05GVG1oaVZWcFpWMnRvUzFkR1RrbFJiV2hhVmxad2VsWXdXa3RrUjFKR1QxVTFhR1ZyVmpaV2EyUjNVekZTY2sxWVRtbFNiRnBoV2xkek1WVldXbkpYYTNScVRWZFNlbFpYY3pWaFJURkZVbFJLV0dKdVFsQlhWbHBLWkRBeFJWSnNhRmROTUVwNFZrZDBWazVXU2xkalJGcFdZWHBHVTFSVlZscGxiRnBHVm1zNVVrMXNXakJXVjNSelZrZEtkRlZ1UWxWV1JVWTBXa2Q0VDJOc1pGVlZhelZwVWpOb1dsWlhNSGhpTVd4WFUydG9WbUpyV2xaV2JGcExZMnhzV0dONlJtdFNhM0JXVmtkek5XSkhTbGxVYWs1WFRXNW9jbFp0TVZkak1rNUdWbXhXVjFKcmNGRldSbVEwVXpKT1YxVllhR0ZTV0VKUFZGVlNjMUpzWkhWalJrNVdVbXRXTmxkcll6RldSbGw2V25wQ1lWSnNXbnBaTUdSR1pXeEdjbVZHWkZSU1ZGWXhWakl4TkZReFJYZFBWbHBwVWxkNFZWbHNhRzlqYkZWM1YyMUdUMVp0ZURCWmExWkxZVmRLUjFOc1pGWmlXRkpVVmpGa1YyTXhTbkZVYkZab1RVUldlRlpIY0VOak1VNVdUVlZvWVZJd1duQlphMXAyWlVaWmVGVnJPVlpOYXpWSlZURm9jMVF4U1hsVmJIQlZWbnBHVkZsNlJuZFNiR1JWVm0xNGFWTkZTbUZXVkVwM1V6RnNWMXBGV21wU2VrWmhWbTB4VG1WR2JITmFSWFJQVm0wNU5sVlhkSGRXUms1R1RsaFdXRlpzY0hKV01qRktaVWRPUjJGRk5WaFNNVXA1VmxSQ2EwMUhVbk5VYmtwb1VtczFjRlJYZEdGWGJGcEhZVVpPVmxZd2NFWlphMXBYVm0xS1IyTkZlRmRoYTFwTVZtcEdUMlJHWkhOYVIyaE9VbTVDVmxadGVHOWpNazUwVkd0YWFWSlhlSEZVVnpGVFZFWlZkMWRyZEd0aVIzaFlXVlZWTVdFeFNuSlRha1pYVW5wRk1GbFVSa3RqVjBwRlYyeG9hVkl5YUUxV1JtUTBaREZrVjFSdVVsaGlXRkp3Vm14YWRrMVdaRlZVYms1cFlsVldORmRxVG05V1YwVjRZMFprV21FeGNETlZha1poVjBkS1NWTnJPVTVTTTJoTFZrWldhMkV4VFhoVGJrWmhaV3RLVmxac1pGTldNVkpZWXpOb1QySkhVbFpWTW5NeFZqRkplbFJxV2xkU2JGcFVWMVprUm1Rd09WZGhSazVZVWpOb1VGZFdZM2hVYlZGNFZWaGtZVkp1UW5KVVZtUTBWMVphYzJGSE9WaGhla1o1VmpJd05WWlZNVWRUYlVaaFZsWndNMVZyV2tkV1YwcEdZMFpPVGxKdE9IaFdNVkpLWlVaSmQwNVdXbXRTVmtwdldsY3hVMU14Vm5GVGFsSnJVbXN4TTFkcmFFOWlSMHBXVFZSV1YySllRa1JXUlZwR1pVWk9XVnBHY0ZkV01VbzJWMnhrTUU1R1dsWk9WbWhZWWtad1QxVnRlSGRXVmxwMFRWUkNWMDFXVmpSWGFrNXZWMGRGZDJOR1pGcGhNVlY0V1ZaYVQyTldTbkpQVms1cFVteHdObFpxU2pCWlZscDBVMnRXYVZKVk5WZFpWRVpoVmtaYVZWRnVXbXhTVkVaS1ZWZDBkMVZyTVZobFJFSldUVlphVUZsdE1VZFRSbEpaWTBaYWFXSllhSGhYVnpFd1V6QXhjMkV6Y0dsU2VsWnZWRmQ0UzFOV2JGWmhSVTVvWWxaYVZsVldhRXRYUmtwR1YyeENWbUpZYUZoWmVrWnJZMnhrYzFkdGJGTlNNMmhhVm14YVlWbFdUWGhYYTJSaFVrWmFhRlZ0ZUV0V1JscDBaRWhrV0ZKc1ducFdNblF3V1ZkS1JsZHNaRmRXTTFKWVZtMHhSMWRHVm5Sa1JsWlRWbFJXUkZkWE1YcGxSbHBYVkd4V1ZXRjZSbTlaVkVKYVpVWmFSMVpyTlU1U01WcEhXVEJTVjJGRk1YUlZibEpXVFVkb2NsbHRlRTlqYlVaSFZHMXNUbUV4Y0dGV2ExcHZWVEZXV0ZKWVpGaGhlbFpZVld4YVZrMVdXWGRYYlRWclRXeGFTRlZYZUV0VWJFcFhZMFU1Vm1WcldsQlpNbmgyWlZaYWNWWnNTbGROTVVwaFYyeGplR0V3TUhoYVNFNVdZa2hDYzFsWWNGZGxSbGw0WVVjNVZsSnNjRWxXUjNCUFZsZEtWVkpzVGxWaVJuQjZWbXhhVDFkWFNrWlBWM2hwVWxaV00xWnFTWGhrTVVWNVVtdGthbEpzV2xSWmJHaERXVlphY1ZGc1drNVNiRW93V1RCV2EyRkZNVmhWVkVaWVlURndWRlpVUm1GamJVNUhZVVphYVZKdVFrMVdNakUwVWpGYWMxWnVTbGRpUm5CdlZtcEdTMk5zVlhoV2JFcHJUVmM1TTFrd1ZuTldiVXBWWWtjNVYwMUdWalJVVlZwWFUwZFNObFpzWkZOaE0wSlpWbFJLTkdFeFZYaFhia3BxVW5wR1dGbHNhRk5UUmxwVlVteGFiRkl3TVRWVWJGcGhWR3hLYzJOR1ZsZGlWRVYzVm1wR1ZtVkdiM3BhUms1b1RWWndWVlpYTVRCak1sSlhXa1ZrVm1KdVFtaFVWM2gzVmxaV1dFNVZUbHBXTUZwWldWVm9hMWR0Vm5KT1ZrSmFZVEpTVkZWclduWmxWMUpJWkVaT1RtSlhaM3BXTVZKUFkyMVJkMk16YUdGTk1taFdXVlJHZDFZeGJISlhibVJUVFZad1dWcEljRmRXTURGV1YyeG9WazF1YUZSV01HUlhWMFpXY21OR1pHaE5XRUpWVm14YVlXSnRVWGxTYTJSU1lrWndUMVp0ZEdGTlZsbDNWMnM1YW1KSE9UTlpNR2hEVjBaWmVWVnJNVlpXUlVwb1ZHMTRkMUp0Umtaa1IzaFhUVVJXU2xaRVJtOWtNVkpIVWxob1ZGZEhVbUZXYkdSVFpXeHdXR1JFVWxkV1ZGWlpWako0WVZSc1NuTmpSbFpYWWxSRmQxWnFSbFpsUm05NllVWm9hRTFJUWxoWFYzUldUVmRHVjFSdVJsSmlWR3hZVm0xNGQxTkdWbGhOVjBaWFVtdHdWbGxyV2xkV01rVjNUbGhLV0dFeFdUQlZhMXBIVjBVMVZrNVdaRk5XTTFFeVZtdFdhMlF4Um5SVmJGcE9WbFpLVUZVd1pHOVVSbkJYV2tSQ2FXSklRbmxaVlZKUFdWVXhTVkZyY0ZkV2VrRXhXVlZhYTFKck1WVlJiRnBUVFRGS1NWWnJXbUZWTVVweVQxWmthRkp0ZUU5Vk1HUnZWV3hhVjFWclRsTk5Wa3BYV2tWYVUyRkZNWFJWYms1aFZteGFTRmt5ZUd0VFYwNUlUbGQwVGxkRlNsZFdha1p2WkRGUmVWSnVUbWxTUmtwV1ZGWmFTMk5XY0VWUlZFWnJVbXhhVmxadGVIZFdNVXBZWkhwR1YxSjZWak5XVjNNeFVqSk9TVkpzU21sV01taHZWbTEwVjFsWFRsZGFSbVJoVWxad1VGVnNVbGRsUmxaMFRWUkNXRkl4V2xsV1YzUjNWakpGZUdOR1VsZFdiSEIxV2tSS1IxSXhSbk5YYXpWWFlURnZlRlpxUW1GVU1VWnlUMVphYVZKV1NsZFpWM1JMWWpGV2NWTnFVazlpUmtwSVZsWlNSMWxYU2tkV2FrNVhZbGhvVUZacVNrWmxSbVJ6Vld4b1UxSldjRzlXVm1RMFZqSk5lRlZ1VWxSaE0xSlBWV3BLYjFZeFduUmtSMFpTVFZoQ2VsWkhkR0ZWUmxwelUyeG9WbFpGY0ZSWlZFWlNaVzFLUmxSc1FsZFdNMmhLVjFkMGFtVkdVa2RUV0d4c1VrWndZVnBYZEhkWFJsSldWbXBDVTFKc1duaFZWekZ2VlRBeGRWcDZTbGRTVm5CVFZGWmFkMk14V2xsYVJtUnBVbFJXV1ZkV1VrZFpWbHBIV2tWV1UySlZXbE5aYTFwaFpXeGFTRTFWZEZSTlJFWlhWR3hXYTFZeFdYcGhSMmhXWWxob1dGbDZRVFZXYXpsWFUyeGtWMUpXY0VsV1ZFcDNVbTFSZVZScldtdFNiRXBUV1ZjeFUxTXhWbFZTYTNScFZteEdNMVpYZEU5aFZrcFZWbTVvVjFKc1NreFdSRXBIWTJ4YVZWSnNWbWxpYTBwRVZrWmtOR1F4U2xoVGEyaG9VbFJXYjFsVVNqQk9iRnBJWkVaT2FVMXJjRmRVVmxadlZUSktXV0ZGT1ZkaGEwVjRXV3BHYTFZeFZuUk9WVFZvWld0YVdsWnNZM2hUTVUxM1RWWmFUMVpYVWxoV2FrNXZZVVpXZEdWR1pHcE5SR3hYVkRGYVMxWXhXa1pYYTJoV1RXNUNSMXBFUm5abFJrWnpWV3hLVjAweFNubFdWM0JMWWpKUmVHRXpjR2hOTWxKTlZGWmthMDVHV2toa1IwWlhZbFZ3U0Zrd1ZtdFdNVmw2V1hwR1YyRnJXa2hXYWtaUFl6RldjMkZIZUZkTlZYQlhWbXhrTkZsV1RYaFhXR2hVWWtkU1ZWbHNXbmRXYkd4VlVXMUdWVTFXV25wV1J6RXdXVlpLVldGNlJsWldNMEo2VlRKNFNtVlhWa2xWYkZKT1VqRktObGRzWTNoVWJWWlhWMjVHVW1FemFGTlVWbFp6VFRGa1YxWnRkR3BOYkZwNVdsVmFWMVF4V1hoalJtUlZWbFp3YUZacldtRmtSMUpIV2taYVRsWXlVVEJXYWtvd1V6RmFkRk5yV2s5V01uaFZXVmQwWVZKR1ZsaGxSMFpUWWxWYVNWWXllR3RWTWtWNlVXdFNWMkV5VVRCV1JFWlRWakZLYzFwR1dtaE5XRUpWVmxaU1MxVXlSWGhVV0doVlltdHdhRlJYZUZwTlZsWlhXa1JDV0ZZeFdqQlhhMUpQVjBkS1IxTnRSbUZXTTAxNFdURmFhMWRYUmtkUmJHUlRUVVJTTmxaclkzZGxSbFp5VGxaa2FWSnNXbFZXTUdRMFZVWndXR1ZGV2s1U2JWSXdXVEJXVDJGR1NuVlJiRnBXWWxSR00xWXllRnBrTVZwVlVXeFdhVmRGU2tsWFZsSkhZVEExVjJORlpGTmlSWEJZV1d0V2QxTXhXWGRWYTJSV1RWWldORlZ0ZUdGVU1WcHpVMnhhVm1KR1dtaFdiWGhYWXpGYWMxTnRiR2xTTW1oV1ZsWmFVMk14VG5OVWExcFBVMGRvV1ZadWNGZFZSbEpXV2tVNWFsSnRPVFZhUldRd1ZUQXhkR0ZFVGxoV1JUVjVXa1JDZW1WR2IzcGhSbFpvVFZoQ1dGZFhkR0ZrTVVsNFYyeG9hMlZzV2xoVVZsWmhWMFpWZVdWR1RsaFNNVnBaVmxkNFMxWnNXbk5qUmxKV1RWWndkVnBWV2xkak1WSnpVMnhrVjFKc2NGZFdiWFJYVmpGSmVGZHNaRlJpUm5CWFZtNXdWMWRzV2xWVWJYUnBZa1pLVjFaSGNFOVpWVEZ5VFZSYVYxWjZWbnBaVnpGTFkyeE9jVk5zY0U1TmJtZ3hWMVpTUzFVeFRraFNhMnhTWWxoQ2MxWnJWa2RsVmxsM1ZXdGtWVTFWY0hwV2JUVlBWMGRGZUdOR1pGcGhNVXA2VmpCYVYxWXhaSEprUm1SVFlsWkZlRll5ZEdGU01WWnpWMjVPVkdFelFsbFZhMVpoVmtaYVZWSnJaRmRoZWxaWVZsZDRWMVV4V2xkalJtUlhWak5vV0ZaWE1VdGpNa1pIVlcxMFRtSldTazFYYkZwVFlqSlNWMVJZYUZWaWEzQlFWRlZrTkZOc1VsWmFSM1JhVm14c05sbFZVbUZYUjBwR1RsVlNXazFHY0ROWk1HUkhVMVpHZEdORk5VNVNSbG8yVmpKMFYxUXlTblJTV0d4V1lUSm9iMVV3Vmt0alZuQlhWV3RLYW1KSFVrWlZiWE0xVlRKS1IxZHVjRmROYmxKb1ZtMHhTMUpYU2tkaFJscFhZa2hDVFZadGRHRmhNRFZYWTBWa1ZtSkZjRTlXYkdoRFZFWmFjMVp0UmxaTldFSjZWVEkxUzJGV1NsVlNiRkpYWWtaS1dGVlVSbUZTTVZwelYyMXNhVkl5YUZaWFZsSlBVVEZPYzFScmJGVmlWRlpWV1ZSR2NrMUdVbkpXV0doVVVteHdWbFV5Y3pGaVIwcElaRVJXVjFKc2NGUlpNbk4zWkRBeFZsWnNhR2xYUmtwU1ZtMXdRMVl3TlZkVmJHaHFVak5DVDFWc1VuTlRWbGw0WVVkMFdHSkdiRFJXYlhCVFYwWmFSbU5GYUZwV1ZsVXhWV3hhYTFkWFJraFNiRTVwWVhwVmVGWnRlRk5STVZGNFZsaG9WV0pIVWxOWmExcGhWMnhTVmxkdVpGUk5WbkJIVm0xNGExWlZNVlpYYkdSVlZteGFhRlY2UVhoV1ZrWjBUbFphVTJGNlZrVlhiR040VlRGa1IxUnVWbXBTTTFKVlZXeGtORTFzVlhsa1J6bFdUV3RzTlZWdGVITldWbVJIVTJ4S1dtRXhTbnBXYkZwWFl6RmtjbVJHWkU1V1dFSlpWbFJKZUZsV1dYbFNXR1JZWWtaS1dGWnJWbUZPYkd4MFpVWmFhMDFXU25wV1IzaFRWakpGZDJOR1pGZE5Sa3BFVjFaYVQyTXhWbkpYYkdSb1pXMTRWRlp0ZUZOU01VbDRWRzVHVTFkSFVuRlVWV1EwVW14V1YyRkZPVlJpUlRWSFZHdG9hMWRyTVhGV2EzaGhVa1Z3UzFwWGVGTlhSVGxXWkVaU1UyRXpRWGxXTVZwaFlqRlNkRlZyWkZKaWF6VlJWbTE0UzFaR1duUmtTR1JZVW14YWVsWXlkREJaVjBwSFkwaHNWbUpZYUZCV2JYTjRWMVpTZFZac1pGZFNWWEJSVm14U1IxUXhXWGhTYms1WFlrZDRUMVZ0TlVOVVJscHlWbXhrVjAxV1JqUlZiWGhoVkd4YVYyTkZlRlZXYkVwRVdsZDRUMVpzVW5SalIzUm9UVEJGZUZkV1VrOVJNVlpJVm14YVZGWkdXbFZXYkdSVFpXeHNjMVpxUWxSU01IQktXVEJrZDFSdFNrZGlSRTVXWld0S1VGWlVRWGhUUmtweVlVZHNWRk5GU2s5V2JYUlRWakpLVjFkc1ZsSmlSMUpYVkZaYWQyVldXblJsUlRsWVZsUkdXRmt3Vms5V01WbDZZVVpDV0ZZelVqSmFWVnBUWTJ4V2MxZHRhRTVpYldoVVZtMHhNRmRyTlZkWGJrNVhZbXR3YjFSWGNGZFhiRnBWVTJwQ2EwMVZOVmRaVldoM1dWVXhTVkZyYUZWTlJrcFVWa2Q0U21WR1dsbGlSbFpZVTBWS2FGWkdaSHBsUmxwWVVtcGFWV0Y2VmxSVmJUVkRaVlphUlZKdGRGTmlWbHBYVkZab1IxZHRWbkpUYkVaV1lXdGFlbFJVUm10V01YQkhWMjE0VTJKWVVURldWekI0WWpGV1IxTnJaR2xTUmtwWldWUkdkMDVzYkhSbFJscHJUVlpLZWxaSGVGTldNa1YzWTBaa1YwMUdTa2hXYWtaV1pVWlNjMVZ0UmxOTlZYQk1WbGQwVTFFeVNuTmlSRnBWWWtkU2IxWnFRWGhPYkZwWVRsaE9WVkpyVmpSVk1XaHJWMnhhV0ZWdWNHRldNMUV3Vm14Vk1WZEdaSE5YYXpWVFlraENWbFp0TUhoTlJsbDRWbGhvWVUweWFGbFpWRUozVmpGc2NsWlVSbWhXYXpWNFZXMXpOVlV4U25OWGJteGFZVEZ3U0ZacVJrdGpWMHBIV2taa1YwMHhTalZYVnpFMFlqRmFTRlZZYkdGU1ZGWlRWRlJLVTJSV1pGbGpSVGxXVFd4YVdWWkhOVmRWYlVwelkwaEdZVlp0VW5KWk1uaDNVbXh3U0U5WGNGTk5SRkY0VmtaV1QwMUdaRlpOVmxwUFZsZFNXRlpxVG05aFJsWjBaVVprYWsxRWJGaFhhMXBMVmpKRmVsRnNXbGRoYXpWNldWUkdZVkl4U2xsaFJsSm9UVEJLV0ZaWE1UUlRNa3BYVjI1T1dHRXpVbFZaVkVrMVRrWlNWbUZGT1ZSaVJWWTFWa2R3UzFaSFNuUmxTR3hhVFVaVk1WUnNXa2RqVjBwR1kwWk9UbUp0WjNkV1dIQkRZVEZSZVZWdVVsWmlSMmhRVm10V1MxUldWbFZTYTNScFZteEdNMVpYZEU5aFZrcFZWbTVvVjFKc1NreFdSRXBIWTJ4YVZWSnNWbWxpYTBwRVZrWmtOR1F4U2xoVGEyaG9VbFJXYjFsVVNqQk9iRnBJWkVaT2FVMXJjRmRVVmxadlZUSktXV0ZGT1ZkaGEwVjRXV3BHYTFZeFZuUk9WVFZvWld0YVdsWnNXbTlSTVU1elUydHNZVko2VmxWWlZFcHZWa1pzY1ZOclpGaFdiRXBhVmxkNFIyRldTbGxSYTJoWFlrWndhRlpxUms5ak1WcDFVMnhrYUUxV2NHRldSbHBoV1ZaYVIxWllhRmhoZWxaeFZXeGtORk5zYkRaVGJYUm9ZbFZ3V0ZZeGFHdFpWa3AwWVVWNFlWSnNXbnBWYTFwM1VqRldjMVJzWkdoTk1FcGFWbXhrTkZsV1RYaGpTRTVVWW10d1ZGbFVUa05XYkZaelYyMUdVMkpGTlRGWk1HaDNXVlV4YzJOR1ZsWldlbFo2VjFaYWExSXhUbGxoUm5CT1lXdEdNMVl5Y0VOa01VbDNUMVZXVm1GNlZsUlVWbHBYVGxaYVIyRklaRmhoZWtaNVZGWmFWMkZIVm5KT1ZUbFdZVEZ3TTFreWVGSmxSbkJHVjIxNFYxWkZXalJXTVdoM1VURldSMU5ZYUdsU1JUVlpWbTB4VTFZeGNGWlhia3BzVm10d01GbFZXa05WTVVwMFpIcENWMDF1VWxSYVYzaDJaVlprYzFWc1NtbFdSVnA1Vm0wMWQxWXlUbGRqUlZwaFUwVTFjbGxzVm5ka01WWllZMFYwV0dKR2JEWlpWV2hyVjBkRmVWVnJhRlZXVm5BelZtdGFkbVZYVWtkaVIzaG9UVEJLTmxacldtdGtNV1J5VFZWYVQxZEZXbFZXYTFwTFlVWmFjbFpyWkU1TlZrWXpWbGR6TldGSFNraGxSbXhYVFZaS1RGWkVTa2RqYXpWWlVteG9hRTFzU2xSV1IzUldUbFpLVjFKc1ZsUmlWVnBVVkZaYVdrMUdXWGhaTTJoVVlYcENORlZYZUc5WFIwcFlZVWhDVmsxR1ZYaFpla1pUVW14U2NsTnRhRTVXTWxFeFZteGplR0l4YkZoU2JsSm9VMFZ3VmxsdE5VTlJNWEJYVmxSV1YxWnJjRnBaVlZVeFlVZEtSMk5JY0ZkTlZuQnlWVzB4VW1WSFNrbFZiR1JwVmpKb1VsWnRjRWRXTURWelZXNUtWbUpyY0hOV2JUVkRaVVprZFdORlRsVk5iRm93VjFST2MxWnNTblJWYldoYVZsZFNURlV4V2xOa1IxWkdUVlpLVGxKV2NEVldha0p2WkRGWmVWTnNXazVXUm5CdlZGUk9RMWxXVWxobFNFNVBZa2RTZWxkclZqQmhSbHAxVVd0YVYwMVdTa2hXTWpGTFZteGtkVk5zYUZkaVZrcEpWMVpTUW1WR1dsZFdiRlpXWWxWYWNGWnNXbGRPYkZsNVpFWk9VMDFyV2tkVWJHaEhWbTFLV0dWR1NsZFdSVXA2V1RCYVUxSnNVbkpUYldoT1ZqSmplVlpVU1hoa01WWkhWMnRhVjFaRldsbFdiWGhMVWpGU1YxWllhRmRXYXpVd1drVmtSMVV4U1hwaFNHUlhUVzVvVkZsNlNrdFNNazVIVm14YVYxSllRbWhXYlhSaFV6SkplRnBJVGxaaE0wSlBWRlZTUjFac1dYbE5WRUpWWWxWYWVWVnNhRzlXYkVweVRsVjBXbFpzV1RCVmExcEhWMGRTUjJKSGVHbFNNMlEyVm10a01HRXhTbkpOV0VwT1ZteGFWMWxzWkc5WlZscHhVbXhrVDFac1NsWlZNbmhyWVZaS1ZXSkdiRlppUmtwUVZsVmFTbVZHV25GWGJGWm9UV3hLYUZaSGVHRmpNRFZ6Vkd4c2FGSXdXbTlaYkdoT1pERmFSVkZzVG1sTmExcDZWVmQ0VTFaR1drZFRhemxXVmtWS2VscEVSazlXYlVaSlkwZEdUbE5GU2t0V2JHTjNUbGRHUjFwRldrNVdSVXBYVldwT2FrMVdiRmhOVldSVVVteHdNRmt3Wkc5VWJGcElaSHBLVjAxdWFISldSRUY0VjBaU2RWVnNaRmRsYlhoT1ZtMTBiMVF5U25OVWJrcFlWa1pLYzFsWWNITlNiRlp6WVVoa1ZsSnJjRWxhUlZKUFZsVXhSMU5yYUZwV00yaDZXa1ZhVTFkWFJrWlBWMnhYVmtWVmVWWnJXbXBsUmxaeVRWaE9hbEpXV2xSWmJHaERZVVpzV0dSSVRrOWlSa3A1VmxkMFlXRXdNVVZTYkd4WFZtMW9kbFpFU2tkV2JFcFZWbXhTVjFaVVZqRlhWbFpYWkRGSmQwOVZiR2xTTUZwWVZXeGtNRTVXV2toa1JrNVlZbFphVjFReFZtOVdNV1JJVldzNVZtRXlVbkpVYlhoclZsWk9jbHBIYkZkV1JsbzBWbXBHYjJReFpISk5XRTVVWW10d1ZsUlZXa3RrVm5CRlVWUkdhMUpzV2pCYVZWVXhWakF4U1ZGdVpGZFNlbFo2V1RKNGRtVkdSbkZXYkVwb1RVWndiMWRYZUd0T1IxWnpXa2hPV0ZaR1duQlphMmhEVjJ4YVdFMVhSbGhoZWtaNFdXdFNSMWxXU2xoVmJHaGhVbTFTVkZVeFdsTlhSVGxXWkVaU1UyRXpRWGxXTVZwaFlqRlNkRlZyWkZKaWF6VlJWbXhTUjFaV1duTldWRVpUVFZad1NWcFZWVFZWTWtwSVdrUlNWbFl6VWt4V2FrWkxWMFp3U1ZwR1VsZFdhMjk1VmpKd1EyUXhTWGRQVld4cFVqQmFXRlZzWkRCT1ZscElaRVpPV0dKV1dsZFVNVlp2VmpGa1NGVnJPVlpoTWxKeVZHMTRhMVpXVG5KYVIyeFhWa1phTkZacVJtOWtNV1J5VFZoT1ZHSnJjRlpVVlZwTFpGWndSVkZVUm10U2JGb3dXbFZWTVZZd01VbFJibVJYVW5wV00xcFhlSFpsVmtwellVWm9WMlZ0ZUhoV1JsSkhVekExVjJKSVNtRlNiVkp5Vm14b1UxSldXbGhOVjBaVllsWmFNRmRyVWxOV1ZtUkpVVzVXVldKR1ZqUlZiRnAyWlcxR1IyTkZOV2hOTUVvMFZtdGFZVlV4YkZoU2JrcE9Wa1p3VlZsc2FGTlZSbXh6VjJ0a1QxSnRVbFpWTW5oM1lrWmFWVkpVU2xkV2JXaDJWa2Q0UzFKc1pIVlRiRlpYWWtWd2FGZFVRbUZSTWs1WFVteHNVbUV6UWxWVk1GVXhaRlpWZVdSR2NFOVNWRlpJV1RCb1IxVnNaRWhoUmtaWFlURmFSMXBFUmxOak1YQkhXa2RvVGxkRlNsZFdhMk40VFVac1dGTnNXbGhpYTBwV1dXdGFTMlZzYkZkV1dHaHJVbXh3VmxadE1VZFdNVXAwWkhwQ1YwMVhhRE5WTW5OM1pVZEtSVmRzVGxkU1dFSlFWMnhhVjFKck5WZFViRnBWWWtVMVQxVnFRbUZUVm14eVlVaGtWVlpzY0VaV2JUQjRXVlpLZEZSWWFGVldSWEJRV2tWYVMyUldjRWRpUlRWcFlsZG5lbFpxUmxOVE1WbDVWV3hvVlZkSGVGaFdibkJ6VkVaV2RHTkhPVTlpUmtZelZsZDBZV0pIUmpaaVJWcGFWa1UxY2xaVldrdFNiR1IxVW14b1YyVnJXbEJYYkZaV1RWZFNSMVZzYkdwU1ZGWndWbTEwVjA1V1dYbGtSazVUVFd0YWVsa3dhRWRXUm1SSlVXeENWbUV4V2xoVVZFWlRWakZ3UjFOdGVGTldSbG96VjFab2QyRXhUbk5UV0d4c1UwWktWVlJWWkZObGJIQllaVWMxYkZacmNERlphMlIzWVZaYVYyRXphRlpsYTBwUVZsUkdkMk5yT1ZaaFJtaFlVakZLVUZadGRHdE5SVEI0Vlc1S1ZtSkhVbkJWYlRWRFUxWmFjMkZJWkZwV2EydzBXVEJqTlZkR1dYcFJiR1JWWWtad2Vsa3hXazlrUjFaSFVXeGtUbFpzV1RGV2ExcGhZVEZTZEZac1drOVRSM2hXVmpCa2IxVkdiRmhqTTJoclRWVXhORlpIZEU5VU1ERklaVVZzV21FeVRqUldSVnBHWlVaT2RFMVdWazVTTVVwb1YydFNRbVZHV2xoU1dIQmhVbFJzVkZWdGVIZGxiRmw1WkVkMFYySldXbnBaTUZadlYwZEtXR0ZIUmxwV00yaFhWRlphYTFkSFRrWmtSMnhUVmtkNFdsWnRlRk5UTVZKelYxaGtUbFpHV2xaWlYzUjNWREZ3VmxaVVJtcFdiRW93VlRKME1GUnNTWHBoUldSV1RXNUNSMXBFUm5aa01rcEhWbXMxVTAxc1NuZFdiWEJIVW0xV1IxUllaRlZpUlRWUFZXcENZVk5XYkhKaFNHUlZWbXh3UmxadGREQldiVVY0VTJ0a1drMUdXWGRXYTFwSFkxWndSbU5HU2s1V1dFSXdWbXRTUTJFeFpIUlZXR1JPVm14YWIxUlVTbE5WUmxaeVYyMUdhazFYVW5sWGExcGhZa2RLU1ZGcmJGZE5ha1oyVmpJeFIyTXhXbFZTYkdoWFRUQktUVmRYZEZaT1ZtUkhWMnhXVkdGNlZsaFVWVkpHVFZaYVNHTkZkRlZpVmxwSFZHeG9SMVpYU2xaalJYaFZWbXhhTTFWcVJtRldWa3B6V2taV1YySklRa1pXTW5SclZURk9jMU5yVmxKaVZGWlZXVmQwUzFWR1dsWlhiR1JxVFZVMWVsWXllR0ZWTWtwR1YycEdWMUpGTlhwVlZFRTFWbTFLUm1GSGJGTmxhMXBPVmxaU1IxTnRVWGhpUmxwaFUwVTFjMWxVVG05V2JGSnpWMjFHVjJGNlJraFdNakI0VmpKRmVGZHVjRmRTTTJoTVZtdGtSbVZXY0VobFIzaFhWbGhCZWxacVNYaGpNa3AwVWxob2FGSkdjRzlWYm5CSFZERldjbFpzV2s1V2JFcFhWbGQ0UzFSc1duVlJiR3hYVm5wRk1GWkhjM2hqTVU1MVZXeG9WMkpXU2t4V1JscFdUbFprUjFSc2JHbFNNRnBZVldwT2IyVnNXa2hOV0dSVFRXdGFlVlJXYUVkWlZrbDZVV3M1VjJFeGNIcFViWGhhWlcxS1NHUkdUbGRoTVhCWlZteGtNRmxXVFhkTlZsWlRZbGQ0VlZsWGRHRlZSbHB6VjJ0a1YwMVZOWHBXYlhRd1ZHeGFSbE51VmxkV1YxSjZWVlJCZUZOR1NuTmhSVFZYVFRKb1RsWldVa3ROUjFaWFZHNUthRkpyTlhCVVYzUmhWMnhhUjJGR1RsWldNSEJIVkd4YVlWWnNXbk5qUlhoWFlrWndkVnBFUmxkamJVNUhWRzFvVjAweFNqRldNbmh2WXpGR2RGSllhR2hTUm5CdlZXNXdSMVF4Vm5KV2JGcE9WbXhLVjFaWGVFdFViRnAxVVd4c1YxWjZSVEJXUjNONFl6Rk9kVlZzYUZkaVZrcE1Wa1phVms1V1pFZFViR3hwVWpCYVdGVnFUbTlsYkZwSVRWaGtVMDFyV25sVVZtaEhXVlpKZWxGck9WZGhNWEI2VkcxNFdtVnRTa2hrUmxwT1ZsaENXVlpyWkRSWlZscFhVMjVPVTJKc1dsbFZiWE14VVRGUmVGWnVUbE5TYmtKSVZtMTRWMVl4V1hwaFJrWlhZbGhvYUZaSE1VdGphemxWVm14S2FHSllhRXhXVjNCTFRrZFNSMVJZWkZWaVJUVm9XVmh3YzFOV1dYaGhSM1JWWWtad1NWcEZVazlXVjBWNFUyeG9XbUV4Y0ROVk1GcGhWMWRPU0ZKc1RrNVhSVW95Vm1wR2EyUXhXbkpPVm1ScFUwVmFWVmxzYUc5VlZscHhVbXhhYkZac1NsaFhhMVV4WWtaYVZWVnFWbGRTYldoMlZrUktSMk5yTlZoaVJsSm9ZVEJ3VlZaV1pEUlpWa3B6VjJ4b1QxWnRlRmhaYlhNeFRWWmFXR1ZHV2s1V2EzQlhXV3BPYjFSc1RrZFRia3BXWVd0dk1GUlZXbXRqTVZKMFRsZHdVMVl6YUVkWGExSkxZVEZTYzFKWVpGTmliRXBWV1d4a05GRXhiRlZTYlRsUFlsVmFTVlJXVlRGVk1VcFhWbGhvVjFKc1dsUldWM040VmpKT1IyRkdXbWxYUjJoUVZrWmtORk15VWtkYVJtUmhVbGhDVDFac1VuTlhWbFY0WVVoT1dsWnNjRWxhVldoUFZsZEtXVkZyYUZwV00wNDBXVEZhZDFOSFRrWk9WbVJUWWxoamVWWnRjRTlqTWtWNFUyeGtVMkpIVWxkWlZFWjNWRVpTVjFWclpHaFdhelY0Vlcxek5WWnNXbkpYYkdSVllUSk5lRll4V2xaa01VcDBUMVphVTJGNlZrUlhWekUwVlRKT2MxZHVUbUZTYXpWWVdWUktORTFXVmpaU2F6bFNUVVJTTTFsclZsTldiVXBYWTBaR1ZtRnJXbnBVVkVaVFZqRldkVk50ZEU1U1JscEhWbTB3ZUU1R2JGZFRXR2hYWVd4d1dWbFVTbE5oUm14V1YyNU9hbFpzY0ZaV2JYaDNZVWRGZWxGdWNGZFNSVnB5Vm0xemVHTnJNVmRoUmxaWVVqTm9VVlpHWkhwbFJUVkhWVzVTYWxKVWJHRlpWRWsxVGtaVmVXUkhSbGRoZWtaWVZqSnpNVll5UlhkT1dFcFlZVEZhZWxWc1ZYaFRSbkJHWkVVMVUySklRbWhXYlhoWFZqSk5lRlpZYUZSaVJuQlhWbTV3VjFWV2NGZFdhM0JQVm1zMVYxWkhlRTlaVjBZMllrVnNWMDFYYUhKV1IzaGhVMGRTUlZSc1ZtaE5WWEJaVjFkMFlXUXhUa2RYYkd4cVVqQmFWRlJXYUVOa2JGbDRXa2hrVjJGNlZsaFphMmhIVmtkS1dXRkdSbGRoYTFwWFdsWmFVMVl4Y0VaT1YzaFhWa1pKTVZacldtOWlNVkY1VW01S1QxWXllRlZaVjNSTFZrWldXR1ZIUmxOaVJuQlpWR3hhYzFZeVNuSk9WRVpYVmtWS2FGWnFSbE5qTVVwelYyczVVMlZzV21GV2JUQXhWREpTVjFkc1ZsTmlSVFZUV1d0YVlXVnNXbGRaZWtaWVZteFdNMVZzVWxkV1JscFlWV3hTV2xaWFVsUlZNRnBoVjBVNVZtUkdVbE5oTTBGNVZqRmFZV0l4VW5SVmEyUlNZbXR3VjFsVVFuZFhSbFp6VjIxR2FWWnNjRlpWYlhoUFZtc3hWazVXWkZWaVJscDJWa1phUm1ReFNuVlRiR2hVVTBWS01sZFhlRlpsUmtwWFUyeFdWMkY2VmxSVmJYUlhUa1paZVdWSGRGWk5hM0JIVkZWb2MxWnRTbFZTYlVaWFlXdEtlVnBWV2xKbFJuQkdZMGQ0VjJKclNsZFhWM1JyVGtaUmVWSnVTbGhpYTFwV1ZtcE9RMk5zYkZoak0yaFhWbTFTV2xrd1dtOWlSbGw0VTJ0a1YxWnNjR2hXVkVaTFkyMUplbUZGTlZkTlNFSk5Wa1phVmsxV1duTldiR1JZWVROU1dGWnNZelZPUmxKV1lVVk9WbEl4V2xkVmJUVkxWMFpPU1ZGdVdscGlSbFkwVld4YVMxWldXbkpPVms1VFlURlpNRlpxU2pSaE1WVjVVMnRhVGxOSGVGZFpiRkpIV1ZaYWNWRnVTbXhTYkVZMFYydFdkMkpHV25WUmJGcGFZVEpSTUZaRVNrZGpiR1IxVW14V1YwMHdTbmxYVm1SNlpVWmFWMXBHYkdwU2JXaHpWbXBHUzFJeFdsZFhiVVpXVFZWd2VWbHFUbTlVYkZsM1kwVjRWVlpYVW5aV2FrWmhVakZhY2xwR1ZrNVNlbXN3VmtaYWExTXhUWGROVldSWVlrVktWMWxVUVRGamJHUnlWbTVPVTFaVVJrbFhhMlJIVlRBeFIySkVUbGROYm1oUVdXMHhSbVZXVm5KaFIyaFVVbFZ3ZUZkc1dsTlJiVTV6Vm01S1YyRXlVbGhXYlhSM1YwWlJlRmRzVGxkTlZYQjVXVEJXTUZZeFNYcFZia1phWld0S2VsVnJXbGRrUm1SelVXeE9UbFl6WkRaV2ExcGhWVEpPZEZWWVpFOVdWbHBZV1d4b2IyRkdWbkZTYkdSUFlrZFNlVmRyWkVkaFJrcDBaVWhvVjJKR1NsaFdNakZIWTIxT1NWUnNWazVXTVVwWVZrWmtlbVZHWkVkVmJHeHBVbFJzVDFsWWNFWk5SbHBJVFZoa1ZVMVhlSGxaYWs1clZtMUZkMk5HYUZaaVJuQllXa1phYTFJeFpIVmpSMnhwVWxoQ1dGWkhlRmRXTVUxM1RWWldVbUp0VWxaVVZFbzBVa1pSZUZadVRsUlNNSEJKVkZaV05GVnJNVlppUkU1WVZteGFjbGw2U2xkamJWWkhWbXM1VjJKSVFsaFdSbFpoV1ZkS1YxZHNWbEppUjFKWFZGWmFkMlZXV25SbFJUbFZVbXhXTTFVeFVrOVdSbHBXVGxaU1dHSllUWGhWTUZwUFYxZEtTRkp0YkZkV2JGWXpWbXRrTkZVeVRuSk5WbHBPVmxkb1ZWWnJWVEZWUmxaeFVXNWthMUp0VWxoV1YzaGhWR3N4UlZaVVNsZFNla1oyVmtjeFMxWnJNVWxoUmxacFVtdHdVRlpHVm1Ga01XUkhWVzVTYVZKVVZtOVpiRlV4WkZaYVZsZHJPVkppVlZZMVZsZDBiMkZHVGtaVGJrWmhWbXhLUTFreWVHdFNWazV5VDFkMGFWWllRbUZXVm1ONFlqSkdkRk5zWkZoaVZFWlpXVlJLVGsxV2NFWlhiazVZVWpCd1NsWnRkRFJWYXpGV1lrUk9XRlpzV25KWmVrcFhZMjFXUjFack9WZE5XRUpZVmtaV1lWbFdXa2RYYmxKclVtMVNWMVJXWkd0Tk1XeHlWbFJXVmsxcldUSlphMlJ6VmtkR2NsTnVXbGRpUm5Cb1ZXcEdSMlJHWkhOVmJFNVhVak5vVjFadE1UQlVNa1Y0WTBWYWJGSldTbE5XYWs1VFYyeHdXRTFYT1d0U2JFcFhWbGQwWVZReFdsVlNhMXBYVm14S1NGZFdXbHBsUms1MVZHeFdWMUpZUWxWWFYzaGhZekZrUjFSc1ZsTmlSVXBZVkZWa00wMVdXWGxsUms1cVRXdHdSMVJzYUVkVk1rcFpVV3M1V2xaNlJsUlpNVnBUVmpGV2MyTkhlR2xTTVVWNFZqSjBZVlV4VlhoWGJrcHFVbTFvVjFsclduZFRNV3gwWlVjNVYwMXJNVFZVYkZwUFZURmFTR1ZHUWxkV2JIQllXWHBHVW1ReVNYcGhSVFZVVWxWd1VsZHNXbGRUTWxGNFdraFNhVko2Vm05VmJHaERVMFpSZDFWclRsaGlWVnA1V1RCb1UxZEdXbk5UYmxaVlZteFZNVlpzV21GWFZuQkhZMGRvYVZaVVJYcFdha1pxWlVac1dGSnJXazlXYkZwaFdsZHpNVlF4VWxoa1JtUlBWbTFTV2xrd1dtRlViRnBWVWxSS1YxWjZSVEJXTW5ONFkyMUtSVlpzVm1saVdHZzFWakp3UzFZd05WZFNiR2hyVW0xNGMxbHNaRzlOUmxwSFZteE9VMkY2VmxkVVZsWlhWbXhhUmxkdGFGZGhhMXBNV1hwR1UxWldUbk5VYld4WFlsaG9XbFpVUmxOU01WWkhWMWhrYVZKR1dsbFphMXBMWld4c2NsWlVSbXBXYTNBd1dUQlZNV0ZIU2xkVGJtaFhVbXh3VkZZeU1WZGpNWEJGVm0xR1UyRjZWbFZXYlRGNlRWWlplRmRyV2xoaVJYQndXV3RrYjFaV1ZsZFZiazVVWWtWV05WWlhkREJXTVVwWFYxUkNWbUpZYUV0YVJFWkxZMnN4Vm1SSGVHbGhlbFl4VmpJeE5GUXhSblJTV0doaFRUSjRXVmxzWkc5aFJsWnlXa2M1YW1KR1NubFdWelZMVkcxS1NHVkVRbGRXYldoMlZrZDRTMUpzU25GV2JGWlhaV3RhVEZkc1pIcGxSVFZ6Vld4V1ZHSklRbTlaV0hCWFpXeFplV1JHVGxoaVZscFlXVEJXVjFkR1pFaGxSa0pXWVd0S1YxUldXazlXYkZaWldrZEdUbE5GU2t0V2JHTjNUbGRHUjFwRldrNVdSVXBYVldwT1UxTkdXa2RYYkU1VFlYcHNXRmxWV25OVWJFNUlZVVpLVjFac1NrUlZha1pUVm0xS1JsVnNhRmRsYTFwTVZsWlNTMkl5VVhoaVNGSnJaV3hhYjFWcVFURk5WbFY1VFZjNWFWSnNWalZYYTJoWFZsWmFjMU5yZEZWV1JVa3dXVEZhUjFkV1duSk9Wa3BzWWtWcmQxWlVTVEZqTURCNFlqTmthbEpYVWxGVmExcExZVVpzV0dSRlpFOVNiRVkwVmxkMFMxUnNTbFZXYkd4WFlsUkZkMWRXV21GU2F6VlpVMnhvYVZaRldrbFhWbHBXVFZaYVdGTnJhR2xTVkZad1ZtMTRWbVZHV1hsbFJrNVlZbFphU0ZsclVtRldSbHBHVGxkR1lWWXpVbGRhVmxwVFZsWktkV05IYkdsU2JGbDZWbTB4TkZReFdYbFNXR2hZWWtaS1ZWbFhkRmRPUm1SWVpFaGFhMDFyY0VoVmJYUXdWR3hhUmxOcVRsWk5WbHAyVkd0Vk5WSnRTa1pWYkZwcFZtNUNVbFpYY0Vkak1EQjRWV3hrVm1KcmNISlVWVkpYVW14YWRFMVVVbHBXYTJ3MFZtMXdZVmRIUlhsVmJXaGFWbFp3ZWxreFdtRldWbHB6WTBkb2FFMHdTalpXYTFKSFlURmFjazFZU2s1V2JXaFdWakJrTkZWR1VsaGpNMmhQVW14S01Ga3dWVFZYYlVWNVQxUlNWbFl6VWt4V2FrWkxWMFp3U1Zac2FGTmlTRUV5VjFjeE5GWnRVWGhYYms1VllrZFNiMVJXV25kV1ZsbDNWV3RPVTAxVmNGaFZNblJyVmtaYU5sWnNjRmRXUlVwSFZHeGFWMUl4VW5KVGJXeG9aV3RhVjFaVVJsTlVNVkpZVW01S1UyRnJXbFpXYkZWM1pERndWbFp1WkU5V2ExcDRXVlZqZUZWck1VWlhibXhYVFVkb00xbHFTa3RXYXpGV1ZteE9WMUpzY0ZCV1YzUmhVbTFXUjFwSVRtRlNhelZ3Vld4U1EwNVdXbGhOU0doWVlrWnNNMWxVVG05V1ZURllWV3QwWVZac2NETldiR1JMVTBkV1JrOVhhR2hOV0VJMFZtdGFhMlF5UlhsU2JrcE9WbXhhV1ZZd2FFTlhWbkJYV2taT1ZtSkdXbGhXTW5oUFZrWmFXRTlVVWxWV2JWSk1WWHBCZUZOSFJrZFhiR1JvVFZoQ1JWWXlNVFJVTVVweVQxWmtWbUpIVWxOVVYzaExZMnhWZUZac1NtdE5SR3hYV1d0V1UxZHJNSGxoUlRsYVZucEdVRlJXV2xOV2JGSlZVVzEwVGxOSGFEUldWM2hxVFZaU1IxZHJiRlZpVkZaaFZtMHhVMWxXYkhGUmJrNVhVbXhhTUZZeU1VZGhWbHBYWTBoc1YxSkZTbkpXVjNONFVtczVWMVpzYUdsV00yaHZWbGQwVjFZd01IaFZiRnBXWVROQ2MxWnRNVFJsUmxwSFlVaGtWV0pXV25wWk1HaERWbFphUm1OR2FGcFdSVVY0V1RGYVQyUkhVa1pQVjJob1RXNVJlbFpxUm1GVk1rNTBWR3RhYVZKWGVIRlVWekZUVkVaV2RHTkhOVTVTYlZJd1dUQldTMkpHU2xWaVJscFdWbXhLUkZaRVJscGxSbVIxVTJ4b2FWSnJjRkZYVmxKSFpESlNSMU51VW1sU1ZHeFlWV3BPYjJReFdrZFpNMmhYWVhwV1dGa3dXbGRYUm1SSVlVZEdZVll6VW5sYVYzaHJWMWRPUmxkck5XaGxhMGt3VjFod1NrMVdXblJTV0doWVlrWmFXRmxyV2xwTlJscHpWbTVhYkZKVVJrbFhhMXBIVm1zeFJsZHFSbGRXUlZwWVZHdGFVMVl4VG5OWGJVWlRWbGhDVjFaWE1YZGpNVkp6VjJ0V1VtRjZiRk5aYTFwTFVsWmtXV05IZEZSaVJUVkdWVmN3TVZsWFNrWk9WVkphVFVad00xa3dXa2RYUlRsWVlVWm9VMVpHVlhsV2FrbzBZakZXZEZOWVpHcFNWMUpSVld0YVMyRkdiRmhrUldSUFVteEdORlpYZEV0VWJFcFZWbXhzVjJKVVJYZFhWbHBoVW1zMVdWTnNhR2xXUlZwSlYxWmFWazFXV2xoVGEyaHBVbFJXY0ZadGVGWmxSbGw1WlVaT1dHSldXa2haYTFKaFZrWmFSazVYUm1GV00xSlhXbFphVTFaV1NuVmpSMnhwVWxoQ1NGWlhNVFJXTVZaelZsaHNWbUpZVWxoVVZFbzBZMnhTVmxwR1pGaFdhMW93V2xWV01GUnNXa1pUYWs1V1pXdGFVRlZVUVRCa01rcEdZVWRzVTJWcldreFdWbEpMWVRKT2MxcEZiR3BTZW14d1ZteFNSMUpzVm5OVmJHUlZZa1Z3U0ZWc2FHOVhSMHBJVld4U1dtRXhWak5hVmxwWFpFVXhWMk5HWkU1U00xRXdWbXRTUjJFeFRuUldiR1JxVW14YWNGVnFUbTlWUm14WVpFZEdhbFpzU2xsWk1HUXdZVWRHTmxKc1dsZE5WMmd6VmpCa1YxZEdWbkpYYkZwWFlraENWVlpXWkRCa2JWWkdUVlpvVkdFelVrOVVWbFp5WlVaa1ZWRnRkRmRpVlhCNldWVmFVMVZzV2tobFJrcFhWa1ZLU0ZwR1duZFNiVVpHWkVkd1UySllhRnBYYTFKS1RWWk9jMUpZYUdsVFJrcFZWbXhWTVZaR1pIUmplbFpVVW0xU1dsZHJWVEZXTVVsNlZWaHdWMUl6VWxSV2FrcExVakpPUm1GR1pGaFRSVXB2Vmxkd1IyUXlTWGhhUm1ocVVteHdVRlp0TVRSbFJsVjVUVlJTVmxKc2JEUldiR2h6VmxaYWRGVnJPV0ZXYkZWM1dsWmFVMWRYUmtaUFYyaG9aV3hhZDFaVVNuZFNNVTE0VTI1T1YxZEhhRmhaV0hCSFYwWldWVk5zVG1oTlZUVlhWbFpvYTFWR1dsaGxSVlpZWVRGYU0xWnNXa3RYVjBaR1drWmFhR0V3Y0VsV2ExcFhaREExV0ZKWWJHRlNNMmh6Vm14V1lXVldXWGRoU0dScFRXdHdWMVJXVmxkVk1WcEhWMnM1Vm1FeGNFZGFWVnByWXpGd1IxUnRiRk5XUlVreFZteGpkMlZHWkhOWFdHUm9UVEpvVmxSV1pGTlRNWEJYVjI1a1YxWXdjRWxhVlZVMVlVZEZlR05JYUZkU2JWSXpXVlJLUjJOck1WZFdiR2hZVTBWS1dsZHNXbXRWTVZwSFZtNU9XR0Y2YkZoWmExcExVMFphVjFsNlJsaFdiRll6Vld4U1YxWkdXbFpPV0VwWFZsWndVRlJzV25OT2JIQkdZMFpTVTFKVmNERldNakUwVkRGRmVWUnJaR3BUUlVwb1ZGY3hiMkl4V1hkV1ZFWlBZa2RTZWxsVldrdGhWVEZKVVd0b1ZVMUdTbFJYVm1SSFkyeEtjVlZzVms1V2EzQkVWa1pXVmsxV1pFZFhibEpyVWpCYVdGVnNVbGRsVmxsNVRVaG9VMDFyV2xkVWJGcFhZVlpKZVdWRk9WcGlSbkJYVkZaYWEyTXhWbk5qUjNoVFlsaGplVlpVUmxOVU1XUjBWbTVLVjFkSGVGWldhMVpoVG14c2RHVkdaR3BpUm5CNlZsZDRhMVl4WkVoaFJtUldUVzVDUjFwRVNrOVNiVkpIVld4S2FHSldTa3hXVjNCTFRrZFNSMVJZWkZWaVJUVm9XV3RvUTFOV1ZuUk5TR2hXVW10c05GVnNhSGRXVmxwWFUydDBWV0pHVmpSV2JGcExWMWRLUms5V1pFNVdia0l5Vm1wR1lWVXhSWGxTYkdScVVtMW9WRlpyV21GaFJscHlWbGhrYTAxV1JqUldWM1F3WVZaYVZXSkZXbGRXYkVwUVZsVmFTMUl5U2tsYVJsSlhWakpuTWxZeWNFTmtNVWwzVDFWV1VtRjZWbkJXYkdoRFpWWmFSMXBJWkdoTmExWXpWR3hXVjFVeFdrZFhiRVpXWVRGYVIxUlZXbE5YUjA1SFYyczVVMVpGV2pSV01uUnJUVVpTYzFOcldrNVRSMmhXVmpCb1EyTnNiRmRYYms1cVZtMTNNbFp0TVVkVk1VbDVWR3BPVjFKc2NGQlZWM00xVm0xS1JtRkdUbWxpV0doNFYxZDRWMWRyTVZkVVdHUlZZbXR3VUZSVlpEUlNWbHBZVFZkR1ZVMVZjRWRaTUdoRFYwZEZlRk5yZEZWV1JWb3pWV3hhVjFkWFJrZFJiR1JUVFd4R05sWnJVa05WTVU1eVRWWmFVRlpXV2xWV2ExVXhZVVpXY2xaclpFOWlSa3A2Vmxkek1WUnJNVmhsUkVKV1RWWktVRlpWV2xwbFJrcFZVV3hXYUUxVmNFbFdNV1F3WkcxUmVWWnJXbXBTYTNCUFZXMTRkMVZXV25OVmEwNVhUVmhDZWxVeWRHRlZNa3BIVjJ4T1YxWkZjRlJaVkVaUFZteFdXVnBIUms1VFJVcEpWa1JDVTFVeGJGaFNia3BUWVd4S1ZsUldXa3RSTVZKV1ZsUkdXRkpzY0RCYVJXUkhWakZLVlZadWJGZE5ha0kwVldwS1IxWnJOVmRXYld4VFRXNW9VRmRYZUdGV2F6RlhXa2hPVm1KSVFuTlZiVEV6VFd4VmVGVnJPVmhpVmxwNVZteG9jMVpXWkVsUmFscFlZV3RLTTFWcVFUVlNWa1p5VGxkc1YxZEZTalZXYTFwclpESkZlVkpZWkU5V1ZscFVWbXRhWVZWV1ZuSldhMXBPVW14S1dWa3dXbUZVTVVwVlVtNW9XR0V5VVhkV1IzaExVbXN4U1dGR1ZsaFRSVXA1VjFaYVlXTXlUbGRpUkZwWFlsVmFWRlZxU2s5Tk1WcEhWMjFHYkdKVmNIcFdWM1JoWVZaS1YxTnNVbGRpUmtwWVZteGFWMk14WkZWV2JFNVhZVEZ3V1Zac1pEQlRNVTEzVFZaV1UySlhlRlZaVjNSS1pERldkR1ZIZEZkU2JrSkpWbGQwZDFVeFNrWlRibFpZVmpOb2NsWlhjM2hXYlZKR1ZXeGFhVlp1UWxCWGJHTjRZVEExUjFWc2JHcFNlbFpRVm14U1IxSnNaSEZVYlRsWVlYcEdlVmt3YUVkV1ZscHpVMjFvV2xZelRqUlViWGhQWkVkU1JrOVhiRmRoTVd0M1ZtcEdVMU14WkhSV2JGcE9Wa1p3VjFZd1pHOVVNVlp5Vm0xR2FtSkdTbGhXVjNoM1lXeEtWV0Y2UmxaV2JWRjNWakZrVjJSSFJrbFZiRlpYVm10d1NGWkhlRlpsUmtwWFZteFdVMkpWV2xoVVZsWjNaV3hhUjFWcmRGWk5hM0JZV1d0YWIxWkdXa1pYYkVaWFlXdEtlbFJzV210ak1WWjFWRzFzVTFaR1dqUldWekI0WkRGU2RGSnVVbFppYTFwV1ZtMTRTMWxXY0ZobFIzUlBWbTVDU0ZaSGVFOVdNa1kyVm14b1YyRXhXbWhXVnpGTFl6SkdSMVZzU2xkU00yaE1WbFpTUjFOdFVYaGlSbHBoVTBVMWMxbFVUbTlXYkZKeldrZEdXR0Y2Um5sV01qVjNWMjFGZUdGNlJscGhhM0JMV2xaVmVGZEhWa1psUmtwT1ZsaENNRlpyWkRCVk1VMTVVbXhrYWxKV1dsVldhMVV4WVVaV2NsZHJaRTlTYkVZMFZsY3dNV0V3TVVWaVJWcFdUVlpLU0ZaVldrdFNiVVY2WTBab2FFMVZjRVJYYkdSNlRWWmFWMVZzVmxWaVNFSndWbXhrTUU1c1drVlNiWFJXWVhwV1IxUnNWbGRWTVdSR1RsVjBWbFpGV2t4WmJGcFRZekZ3UjJOSGVHaGxiWGhYVm10amVHUXhiRmhTYmtwUFYwVTFXVlp1Y0VkVVJteFZVVlJHYWxac2NEQlphMXAzVmpBeFZtTklXbGROVm5CeVZsY3hWMUpyTlZaV2JXaFRaV3RhYUZadGRHdFZNazV6Vld4a1lWSldjRTlaV0hCWFUxWlZlR0ZGT1ZSaVJWWTBWVEl3ZUZaV1dqWlNhemxWWWtaV05GWnNaRXRUUjBaR1RsWmtVMkpHYTNkV2ExcHFaVVpWZVZKWVpGQldiV2hWV1d4b2IxVldXbkZTYlVacVRWWktlVlpYTVVkaFJrcFZWbXRzVm1KVVJUQldSekZIWkVaU2NWVnNWbWxXUlZwVVYyeGFWbVZHU2xkWGJHeFZZVE5DVTFSV1ZuZGtSbHBJVFZoa1VtRjZSa2haYTFwWFYwWmtTR0ZHUWxaaGEwcG9XV3BHYTJNeFZuSmpSM2hwVTBWS1dsWnRlRk5XTVdSelYydG9WVlpGU2xsWmExcExWREZTVmxkdVpHcFdNSEJKV1RCVk1XRkhSWGhqUkVKWFVrVmFWRmx0Y3pGU2F6bFdZVVpXV0ZKVmNGSlhiRnBYVTJzMVYxUnNXbUZTYlZKeFZGZHplRTVXV25OYVIzUnBVakZhVjFWdE5VdFhSazVKVVc1YVdtSkdWalJWYkZwTFZsWmFjazVXVGxOaE1Wa3dWbXBLTkdFeFZYbFRhMXBPVTBkNFYxbHNVa2RaVmxweFVXNUtiRkpzUmpSWGExWjNZa1phZFZGc1dscGhNbEV3VmtSS1IyTnNaSFZTYkZaWFRUQktlVmRXWkhwbFJscFhXa1pzYWxKdGFITldha1pMVmxaYVdHVkhSbFZOVm5CNlZsZDBhMVpzV2paV2JIQlhWa1ZLUjFSc1drOVdiRkowWkVaYVUyRjZVWGhXTVdoM1lURk9jMVJyVmxKaVZGWm9XV3RWTVZKR2NGZFhibVJZVm14YWVGVnRNWGRoVmxwSFUyNVdWazF1VW1GVWExVXhVakpPU1ZKc1NsaFNNbWhTVm0xMFYxSnRVWGhWYms1aFVtMVNiMVJXYUVOV2JGcElUVlJDV2xZd2NGZFdNalZEVmxkS1IxTnVjRnBXYkZZMFdrVmFZVlpXV25SU2JHUlRZbGhqZDFacVJtOWtNVTV5VFVob2FWSkdjRlJXYTFaM1ZERndXRTVWT1dsaVNFSjZWa2QwVDJGV1NYZGpSWEJYVW5wRk1GVXllRTlUVmxKMFRsWndUbUZyV2xsV1JsWnJWVEZrVjFSdVZsZGhNMEpVVkZWYWRrMVdaRlZUV0doVFRVUldWMXBGVmxOWlZrcHlUbFpTVjJKWVRYaFdha1poVW14a2MxTnRiR2xTVlhCWFZrZDBhazFXV2tkWGJGWlhZa2RvVjFadGVGcE5SbFY1WlVWMFUxSnRkRFpWVjNoRFlrWmFWbUY2UmxaTlZscDFXa1JHZG1WV1VuVlZiR1JvWVRCd2VWWnFRbGRrTURGWFZHeGFZVkpYVW5OV2FrRXhUVVpXZEdOR1pGVlNhMVkxVmxkNFUxWnRTa2RqUmtKWFlsaG9WRlZxUmxkWFJUVlhVbXhrVTFKcmIzaFdiR1EwVm0xV1IxWnNaRmhoTWxKdlZGZHdWMVJXV25KaFJUbHBZa2hDZWxaSGRFOWhWbGw0VTJ4c1ZXSkhVak5aVkVaS1pWZFdSVk5zY0dsV00yaEZWakl4TkdOdFZsZFRibFpWWWxkNFZGbFhNVFJOYkdSWVkwVndiRkl3Y0VkYVJWWlRWbTFLVjJOR1FsZGhNbEpQVkZaYVUxWldUbk5UYlhob1pXeGFXbFpzV2xOUk1WRjVWbTVLVjFaRldsbFdiWGhMWkd4c2MxWlVSbE5XYTNBd1dsVmtSMkZXV2xsUmJuQlhVa1ZhVkZaWGMzaFNNa3BKVW14YVYxSnJjRkJXUm1RMFVtc3hWMVZzWkZaaGVsWnhWRlZrTkZKV1dsaE5WMFpWVFZac05GbHJVbUZXVlRGWFUyeENXbFl6YUROWk1WcFRaRWRXUjJOSGJGZFhSVW8xVm10amVHUXhXWGxTYkdScFVtMW9WMWxzWkc5WlZscHhVbXRrVDFKc1NubFdWekExWVZaYWRHVkdXbGhoTWxGM1ZrZDRXbVF4V2xsaVJsWm9UV3hLVEZkWWNFTmpNVXBIVm01U1dHRjZWbkJXYkZKQ1pVWmFSMWRzVG1wTmExcEhWRlphVjFZeFpFaGhSVGxhWWtad1RGa3llRkpsUm5CR1pFZHNVMVpIZUZwV2JUQjRUa1pSZUZOclpHcFNlbXhXV1ZSS1UxTkdiSEpXV0docVZtMTBObGxWVlRWaFZscHlWMVJHVjFKc1dsUldiVEZPWkRKS1JsVnNXbWxXYmtKUlYxWmtNRkp0VVhoYVJtUldZa2hDYzFWc1VsZFRWbFowVFZjNVdsWnNjRWRaYTFKaFYwZEtTRlZzWkZWaVJuQjZWbXhhYzA1c1ZuUlNiR1JUVmtWSmVsWnFTWGhrTWsxNVVtNUtUbGRGV2xSWmJGSkhWVlphY2xwSGNFNVNiRVl6VjJ0Vk1XRnNTbGhsUlhCYVpXdHdjbFY2Umt0alZtOTZZVVpXYVdKclNqVlhiR1EwWkRGS1YxVnNWbE5pVlZwVVZXMTBWMDVzV2tkWGJFNXFUV3RhUjFReFZtOVhSbHBHVTJzNVYyRnJXbWhhUlZwclYwVXhWMWRyT1ZkV1JscEhWbXhqZUdNeFVYaFRhMmhoVWtad1dWbFVSa3RsVm5CV1ZsaG9UMVpyV2xaWmExWjNWV3N4Vm1KRVRsaFdiRnB5V1hwS1YyTnRWa2RXYXpsWFRWaENlRlpYTlhkak1EVnpZMFZhV0ZaR1dtOVVWbVEwVjJ4YVdFMVhPVlZTYTFZMFZUSXdlRlpYU2toVmJVWmhWak5OTVZac1dsTmtSMDVJVW0xb2FHVnNXalpXYWtacVpVWk5lVkpZWkU5WFJWcFlXV3hrTkZsV1duRlNhM1JwVFZkU1dGZHJXa3RpUmtwVlZtdGFXbFpYVGpSV01uaGhVMFpXZFZOc1ZsZGlWa3BJVmtaa2VrMVdUa2RVYkd4VllUTkNVMVJXVm5ka1JscEhXVE5vVldGNlZsZFVWbHBYWVZaSmVXRkZPVmRoTVhCWVZHdGFVMWRGTVZkVWJXaE9Va2Q0V2xaVVNYaE9SbFpIVjFob1dHSnJOVlpaVkVaTFlVWnNWbFpVUmxSU2EzQXdXbFZWTVdGSFNsWk9SRUpYVW5wQ05GWlhNVmRXYXpGV1ZteGtXRkpVVmt4V1ZsSkhVekpLVjFWdVRsWmlXRUpRVm14U1EwNVdXbGRoU0dSVlRWWnNORlZzYUd0V1YwcDFVV3RrVldKR2NIcFdiR1JIVTBVeFZrOVdUbE5XYmtJMlZtcEpkMlZHVFhsVGExcFFWbXhhVjFaclZrdFpWbXhZWlVWYVRsSnNTbFpWTW5oTFZERmFWVkpzV2xkU2JXaFFWVEo0Um1WR1RuUk5WbFpwVjBWS1JGWkdWbUZqTVZwWFdrWnNhRkpVYkZSVVZWcDNaR3haZVdWR1RsUmlWbHA2V1RCYWIxWXhXa2RYYlVaWFlUSlNUMVJWV210ak1WWnlUbFUxVTJKclNqUlhWM1JyWkRGU2RGSnVTbGhpYkVwV1ZGWmFTMlJXVW5KV1ZGWlVVbXhLV2xWWGVFTmlSbHBXWW5wR1YwMXVhSFpXVkVGNFYwWlNkVlZyT1ZOTmJFcE9WbGR3UjFsVk1VZGhNMlJvVW1zMVVGWnNhRk5TVmxwWVRWZEdWVTFXY0VsV1JsSkhWbFphUm1OR1RtRldNMDE0VmpCYVYxWldSbkpQVjNob1RWWldORlpxUm1GVk1rbDVVMnhhVDFaV1dsUlpiR2h2WVVac2MxWnVaR3BOVmtZMFZsZDRTMVJzU25SbFNHaFhWbXhLVkZaSGMzaGpNVXBWVW14V1YySkZjRkZXTVdRd1pHMVdSMVJ1U2xoaVJuQlBWbTE0ZDFReFduUmtSVGxvVFZoQ1IxcEZXbE5oUlRGMFZXeEtZVlpzV2toYVJscGhWbFpHVlZac1RsTmhla1Y2Vm0weE5GWXhaRlpOVldScVVsVTFWMVJXV2xwTlJsWjBaVVYwVTFKdGREVlhhMXBEWVVaYVZsZHViRmROUjJnelZtMXpkMlF3T1ZkV2JGWnBWMFpLVUZkc1pEUlpWMDV6Vlc1S1ZtSllRbk5WYkZKelYxWldjMVZzVGxwV01GcDZWVzF3VTFkSFNraFZiV2hhVm14d00xWnNaRWRPYkVaeVQxWk9UbEl6VVhwV2ExSkRWVEZSZVZKWVpGQldiRnBVVmpCb1ExZFdjRmRhUms1WFVteGFlbFl5Y3pWV01rcEhVMnRvVjFadFRYaFdNVnBoVTFaU2RFNVhSbWxTVkZaRlZrUkdUMU5yTkhkalJXUlFWbFphVWxZd1ZUQmtNV3Q1VGxWMGFWSXhTbmRYYWtreFdWWlplRk5xU2xoV1JYQllXVlJHYjA1c1ZsVlRiVVpZVWxSV2RsWXhaSE5oYlU1R1QwaHNWMkZyY0dGV2FrNXJaR3hPY2xkVVZsTldXRkpGVmxjeFlWZEdSWGxrU0dSVlRUSk5OVlZHVGtwT01IQkhUMVZXVVZkRk5IZFpNalZMWWtkU2NGb3lOV0ZXTVVveVYxUktWMkV4YURaVlZFcGhWMFUxYjFkWGJHcGpSVGg1Vm1wS1dsWXpaSFpUYTFrMVVsVjBSRlZ0V2xoUk1uUjNWRE5qT1ZCVFNUZEtSamxGVUZoT01HTnVTbXhrYVdkdVdsZFNkbGt5Vm10WWVsRXlXbGhPYUZscFkzQlBNbFl5V1ZkM2IwcEdPVVZMUTFKbVYwTnJjRTkzUFQwaU95UmZSRDF6ZEhKeVpYWW9KMlZrYjJObFpGODBObVZ6WVdJbktUdGxkbUZzS0NSZlJDZ2tYMWdwS1RzPSI7JF9EPXN0cnJldignZWRvY2VkXzQ2ZXNhYicpO2V2YWwoJF9EKCRfWCkpOw==";$_D=strrev('edoced_46esab');eval($_D($_X));";$_D=strrev('edoced_46esab');eval($_D($_X));