<?php
/**
 * Amazon Payments
 *
 * @category    Amazon
 * @package     Amazon_Payments
 * @copyright   Copyright (c) 2014 Amazon.com
 * @license     http://opensource.org/licenses/Apache-2.0  Apache License, Version 2.0
 */
?>

<form id="co-widget-form" action="">
<div class="amazon-widget" id="checkout-widget">
    <input type="checkbox" style="display:none;"> <!-- MageMonkey Mailchimp compatibility (their JS requires a form element to dynamically append input element) -->

    <input type="hidden" name="amazon_order_reference_id" value="" />
    <input type="hidden" name="amazon_billing_agreement_id" value="" />
    <input type="hidden" name="amazon_billing_agreement_consent" value="" />
    <input type="hidden" name="payment[method]" value="amazon_payments" />


    <?php if ($this->isShowShip()) : ?>
    <div id="amazon-widget-address-wrapper" class="amazon-widget-wrapper">
        <h3><?php echo $this->__('Shipping Information') ?></h3>
        <div id="amazon-widget-address"></div>
    </div>
    <?php endif; ?>

    <div id="amazon-widget-wallet-wrapper" class="amazon-widget-wrapper">
        <h3><?php echo $this->__('Payment Information') ?></h3>
        <div id="amazon-widget-wallet"></div>
    </div>

    <div id="additional-form-fields">
      <?php if ($this->isNewsletterEnabled()): ?>
      <p>
          <input type="checkbox" name="is_subscribed" title="<?php echo $this->__('Sign Up for Newsletter') ?>" value="1" id="is_subscribed" class="checkbox" />
          <label for="is_subscribed"><?php echo $this->__('Sign Up for Newsletter') ?></label>
      </p>
      <?php endif; ?>

      <?php echo $this->getAdditionalForm(); ?>
    </div>

    <?php if ($this->isTokenEnabled()) : ?>
        <div id="amazon-widget-consent"></div>
    <?php endif; ?>

    <div class="buttons-set" id="widget-buttons-container">
        <button type="button" title="<?php echo $this->__('Continue') ?>" class="button btn-widget-contd" onclick="amazonWidgetStep.save()"><span><span><?php echo $this->__('Continue') ?></span></span></button>
        <span class="please-wait" id="widget-please-wait" style="display:none;">
            <img src="<?php echo $this->getSkinUrl('images/opc-ajax-loader.gif') ?>" alt="<?php echo $this->__('Loading next step...') ?>" title="<?php echo $this->__('Loading next step...') ?>" class="v-middle" /> <?php echo $this->__('Loading next step...') ?>
        </span>
    </div>

</div>
</form>


<script type="text/javascript">
//<![CDATA[

var AmazonWidgetStep = Class.create();
AmazonWidgetStep.prototype = {
    hasAddress: false,
    hasPayment: false,
    showShipping: true,

    initialize: function(form, saveUrl){
        this.form = form;
        if ($(this.form)) {
            $(this.form).observe('submit', function(event){this.save();Event.stop(event);}.bind(this));
        }
        this.saveUrl = saveUrl;
        //this.validator = new Validation(this.form);
        this.onSave = this.nextStep.bindAsEventListener(this);
        this.onComplete = this.resetLoadWaiting.bindAsEventListener(this);
    },

    setAmazonOrderReferenceId: function(id) {
        $(this.form)["amazon_order_reference_id"].value = id;
    },

    setAmazonBillingAgreementId: function(id) {
        $(this.form)["amazon_billing_agreement_id"].value = id;
    },

    setAmazonBillingAgreementConsent: function(hasConsent) {
        $(this.form)["amazon_billing_agreement_consent"].value = hasConsent;
    },

    getAmazonBillingAgreementConsent: function() {
        return $(this.form)["amazon_billing_agreement_consent"].value == "true" ? true : false;
    },

    validate: function() {
        if (!$(this.form)["amazon_order_reference_id"].value) {
           alert(Translator.translate('Amazon Order Reference ID required. Please try again.'));
           return false;
        }

        if (this.showShipping && !this.hasAddress) {
            alert(Translator.translate('Please select a shipping address.').stripTags());
            return false;
        }
        if (!this.hasPayment) {
            alert(Translator.translate('Please select a payment method.').stripTags());
            return false;
        }

        <?php if ($this->isTokenRequired()) : ?>
        if (!this.getAmazonBillingAgreementConsent()) {
            alert("Please check 'Use my selected payment method for future purchases and payments to this merchant' to complete this purchase.");
            return false;
        }
        <?php endif; ?>


        return true;
    },

    save: function(){

        if (checkout.loadWaiting!=false) return;
        if (this.validate()) {
          checkout.setLoadWaiting('widget');

          var request = new Ajax.Request(
              this.saveUrl,
              {
                  method:'post',
                  onComplete: this.onComplete,
                  onSuccess: this.onSave,
                  onFailure: checkout.ajaxFailure.bind(checkout),
                  parameters: Form.serialize(this.form)
              }
          );
        }
    },

    resetLoadWaiting: function(transport){
        checkout.setLoadWaiting(false);
    },

    nextStep: function(transport){
        if (transport && transport.responseText){
            try{
                response = eval('(' + transport.responseText + ')');
            }
            catch (e) {
                response = {};
            }
        }

        if (response.error) {
            alert(response.message);
            return false;
        }

        if (response.update_section) {
            $('checkout-'+response.update_section.name+'-load').update(response.update_section.html);
        }

        if (response.goto_section) {
            checkout.gotoSection(response.goto_section, true);
            return;
        }

        checkout.setShippingMethod();
    },

    toggleOrderSubmit: function(isDisabled) {
        var btn = $$(".btn-widget-contd");
        if (isDisabled) {
            btn.invoke('writeAttribute','disabled','disabled');
        } else {
            btn.invoke('removeAttribute','disabled');
        }
    }
};


    var amazonWidgetStep = new AmazonWidgetStep('co-widget-form', "<?php echo $this->getUrl('amazon_payments/onepage/saveWidget', array('_secure' => true)) ?>");

    // Variables for Mage Onepage
    var quoteBaseGrandTotal = <?php echo (float)$this->getQuoteBaseGrandTotal(); ?>;
    var checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
    var lastPrice;

    // Empty class for shippingMethod.nextStep
    var payment = Class.create();
    payment.initWhatIsCvvListeners = function() { };
    payment.form = 'co-widget-form';
    payment.currentMethod = 'amazon_payments';

    // Overrides
    document.observe("dom:loaded", function() {
        checkout.gotoSection('widget', false);
        if (typeof shippingMethod != "undefined") {
            shippingMethod.saveUrl = '<?php echo $this->getUrl('amazon_payments/onepage/saveShippingMethod', array('_secure' => true)) ?>';
        }

        // Add error checking for payment declines
        Review.prototype.nextStep = function(transport){
            if (transport && transport.responseText) {
                try{
                    response = eval('(' + transport.responseText + ')');
                }
                catch (e) {
                    response = {};
                }
                if (response.redirect) {
                    this.isSuccess = true;
                    location.href = response.redirect;
                    return;
                }
                if (response.success) {
                    this.isSuccess = true;
                    window.location=this.successUrl;
                }
                else{
                    var msg = response.error_messages;
                    if (typeof(msg)=='object') {
                        msg = msg.join("\n");
                    }

                    // Clean BillingAgreement error message
                    if (msg.indexOf("BillingAgreement") != -1 && msg.indexOf("total authorization amount cannot exceed") != -1) {
                        msg = "You have exceeded your total authorization amount for this billing agreement period. Please contact the store manager."
                    }

                    if (msg) {
                        alert(msg);
                    }

                    // Refresh Wallet
                    if (msg.indexOf("terms and conditions") == -1) {
                      checkout.gotoSection("widget", true);
                      setTimeout(loadAmazonWallet, 2000);
                    }

                }

                if (response.update_section) {
                    $('checkout-'+response.update_section.name+'-load').update(response.update_section.html);
                }

                if (response.goto_section) {
                    checkout.gotoSection(response.goto_section, true);
                }
            }
        }


    });

    // 1.9
    $$('body')[0].addClassName('opc-has-progressed-from-login');

//]]>


</script>


<?php if ($this->isShowShip()) : ?>
<!-- Address Book Widget JS -->
<script>

var amazonBillingAgreementId;

var addressBookOpts = {
    sellerId: '<?php echo $this->getSellerId(); ?>',
    onOrderReferenceCreate: function(orderReference) {
        amazonWidgetStep.setAmazonOrderReferenceId(orderReference.getAmazonOrderReferenceId());
    },
    onAddressSelect: function(orderReference) {
      amazonWidgetStep.toggleOrderSubmit(true);
      amazonWidgetStep.hasAddress = true;
    },
    design: {
       designMode: 'responsive'
    },
    onError: function(error) {
      if (error.getErrorCode() == "BuyerSessionExpired") {
           document.location.href = '<?php echo $this->getUrl('checkout/amazon_payments/clear'); ?>';
      }
      console.log(error.getErrorMessage());
    }
};

<?php if ($this->isTokenEnabled()) : ?>
amazonBillingAgreementId = Mage.Cookies.get("amazonBillingAgreementId");

if (amazonBillingAgreementId) {
    addressBookOpts.agreementType = "BillingAgreement";
    addressBookOpts.amazonBillingAgreementId = amazonBillingAgreementId;
}

addressBookOpts.onReady = function(billingAgreement) {
    if (!amazonBillingAgreementId) {
        amazonBillingAgreementId = billingAgreement.getAmazonBillingAgreementId();
    }
    amazonWidgetStep.setAmazonBillingAgreementId(amazonBillingAgreementId);
    loadAmazonWallet();
};
<?php endif; ?>

AmazonPaymentsCallbacks["widgets_address"] = function() {
    new OffAmazonPayments.Widgets.AddressBook(addressBookOpts).bind("amazon-widget-address");
}

amazonWidgetStep.toggleOrderSubmit(true);
</script>
<?php endif; ?>


<!-- Wallet Widget JS -->
<script>

function loadAmazonWallet() {
    new OffAmazonPayments.Widgets.Wallet({
        <?php if ($this->isTokenEnabled()) : ?>
        amazonBillingAgreementId: amazonBillingAgreementId,
        <?php endif; ?>

        <?php if (!$this->isShowShip()) : ?>
        onOrderReferenceCreate: function(orderReference) {
            amazonWidgetStep.showShipping = false;
            amazonWidgetStep.setAmazonOrderReferenceId(orderReference.getAmazonOrderReferenceId());
        },
        <?php endif; ?>

        sellerId: '<?php echo $this->getSellerId(); ?>',
        design: {
            designMode: 'responsive',
        },

        onPaymentSelect: function(orderReference) {
            amazonWidgetStep.hasPayment = true;
            <?php if ($this->isTokenEnabled()) : ?>
            loadAmazonConsent();
            <?php else: ?>
            amazonWidgetStep.toggleOrderSubmit(false);
            <?php endif; ?>
        },
        onError: function(error) {
            console.log(error.getErrorMessage());
        }
    }).bind("amazon-widget-wallet");
}

<?php if (!$this->isTokenEnabled()) : ?>
AmazonPaymentsCallbacks["widgets_wallet"] = function() {
    loadAmazonWallet();
}
<?php endif; ?>


<?php if ($this->isTokenEnabled()) : ?>
<!-- Consent Widget JS -->
function loadAmazonConsent() {
    amazonWidgetStep.toggleOrderSubmit(true);

    new OffAmazonPayments.Widgets.Consent({
      sellerId: '<?php echo $this->getSellerId(); ?>',
      // amazonBillingAgreementId obtained from the Amazon Address Book widget.
      amazonBillingAgreementId: amazonBillingAgreementId,
      design: {
          designMode: 'responsive'
      },
      onReady: function(billingAgreementConsentStatus){
          // Called after widget renders
          if (typeof billingAgreementConsentStatus != "undefined") {
              amazonWidgetStep.setAmazonBillingAgreementConsent(billingAgreementConsentStatus.getConsentStatus());
          }
          amazonWidgetStep.toggleOrderSubmit(false);
      },
      onConsent: function(billingAgreementConsentStatus) {
          if (typeof billingAgreementConsentStatus != "undefined") {
              amazonWidgetStep.setAmazonBillingAgreementConsent(billingAgreementConsentStatus.getConsentStatus());
          }
      },
      onError: function(error) {
        console.log(error.getErrorMessage());
      }
    }).bind("amazon-widget-consent");
}

<?php endif; ?>

</script>



